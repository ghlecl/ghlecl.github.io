<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Code Attempts</title>
    <link>https://ghlecl.github.io/posts/</link>
    <description>Recent content in Posts on Code Attempts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>codeattempts@gmail.com</managingEditor>
    <webMaster>codeattempts@gmail.com</webMaster>
    <lastBuildDate>Sat, 19 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ghlecl.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mixed types arithmetic in C&#43;&#43;</title>
      <link>https://ghlecl.github.io/posts/usual_conversions/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/usual_conversions/</guid>
      <description>Arithmetic on mixed fundamental types in C++ For a weekend project of mine, I have had to think about mixed type arithmetic on fundamental types in C++. In the process, I made sense of a few fundamental things (no pun intended ;-)&amp;nbsp;) and I have decided to write them down. Hopefully, writing about it will allow me to both clarify my thoughts and remember the information!
Arithmetic conversions Applying binary operators to different types might seem trivial in C++, because it mostly just works.</description>
    </item>
    
    <item>
      <title>Integer binary representations</title>
      <link>https://ghlecl.github.io/posts/integer_representations/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/integer_representations/</guid>
      <description>Integer binary representations I had never had to look closely at integer binary representations in computers. The mental model I had for them was not wrong, but it turns out it was sub-optimal and there are better ways to do things. If you use high level abstractions and do not mainly work with fundamental types, or if you do not convert between integer types, you do not have to be mindful of the binary representation of integers all the time as you program.</description>
    </item>
    
    <item>
      <title>Return type overloading</title>
      <link>https://ghlecl.github.io/posts/return_type_overload/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/return_type_overload/</guid>
      <description>No return type overloading In C++, return type does not participate in function overload resolution, i.e. it is not possible to overload a function on the return type. Thus, this is not legal C++:
void to_lower( std::string&amp;amp; strg ); std::string to_lower( std::string&amp;amp; strg );  The compiler will issue an error when it sees the second declaration.[1] For instance, the error Clang emits is the following: &amp;ldquo;error: functions that differ only in their return type cannot be overloaded&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>rvalue references in C&#43;&#43;</title>
      <link>https://ghlecl.github.io/posts/learning_rvalues/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/learning_rvalues/</guid>
      <description>move, rvalues, forward and C++ Ever since I heard about it, the concept of move semantics has been intriguing and appealing to me. I confess to liking new C++ things and micro-optimizations way too much&amp;hellip; but still, the concept of &amp;ldquo;moving&amp;rdquo; memory instead of copying it in order to gain efficiency is at least worth exploring, right? Anyhow, I chose a function of mine and decided to try and make it handle move semantics properly.</description>
    </item>
    
    <item>
      <title>Using a theme with Hugo</title>
      <link>https://ghlecl.github.io/posts/hugo_theme/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/hugo_theme/</guid>
      <description>Hugo themes Initially, I had two objectives for this blog. One was to have a place where I could write some notes on programming for myself so that I could find them when I needed them. The other was to learn a bit more about the web.
I thought (naively, granted) I could write it all myself using a static site generator. I wanted to write the HTML, the CSS, the JavaScript, everything!</description>
    </item>
    
    <item>
      <title>Timing pieces of code</title>
      <link>https://ghlecl.github.io/posts/cxx_time_it/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/cxx_time_it/</guid>
      <description>Execution time measurements Python&amp;rsquo;s timeit and repeat I sometimes want to time my code to see which version of a function I wrote runs faster. I know that you should always profile before you optimize and that micro-benchmarking has lots of caveats (some of which I have myself fallen victim to), but still, sometimes, curiosity gets the best of me and I just have to know. When I am writing in Python, I use the timeit module to measure code execution.</description>
    </item>
    
    <item>
      <title>My Hugo Setup</title>
      <link>https://ghlecl.github.io/posts/hugo/</link>
      <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/hugo/</guid>
      <description>Hugo I have decided to go with Hugo and Github Pages for this note taking blog. This is simply me describing my setup with Hugo and explaining what I have been able to accomplish to this point. It is not much, but writing it down helps me clarify my thoughts and insures I don&amp;rsquo;t have to figure it out again (which, ironically, I had to do to write and post this entry!</description>
    </item>
    
    <item>
      <title>Static Site</title>
      <link>https://ghlecl.github.io/posts/static_site/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/static_site/</guid>
      <description>Hugo In a previous entry, I described how I got to using GitHub Pages. That was one of the (if not the) first question I had to figure out when I decided to write my notes in an Internet format (ok, blog, but I don&amp;rsquo;t see myself as a blogger). The second thing I had to figure out was what to use as a writing tool. I could simply write static HTML by hand and leave it at that (actually, if you stumbled upon this website before I posted my first few posts, I left a Hello World page up for a few weeks/months while figuring all this out!</description>
    </item>
    
    <item>
      <title>GitHub Pages</title>
      <link>https://ghlecl.github.io/posts/github_pages/</link>
      <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
      <author>codeattempts@gmail.com</author>
      <guid>https://ghlecl.github.io/posts/github_pages/</guid>
      <description>GitHub Pages This is one of my first posts. I have been toying with the idea of this blog for quite some time now. A flaw of mine: too much searching for the best solution, not enough implementing. I end up doing things too late. Anyhow, I digress.
One of the relevant questions when thinking of writing a blog is of course where to publish and what tool(s) to use.</description>
    </item>
    
  </channel>
</rss>