window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}}}}}},"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"8":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"9":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1},"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.358898943540674},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":8,".":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"Ã—":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}},"0":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"6":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"0":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"6":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":4.69041575982343}},"df":1}},"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}}}}}},"2":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2,"7":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772}},"df":1},"8":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1},"9":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"9":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1,"9":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"y":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7,"(":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178}},"df":1}},"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"6":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"8":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}},"1":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"[":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"4":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"5":{"docs":{},"df":0,"4":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"5":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"âˆ’":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"âˆ’":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,"Ã—":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}},"1":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"8":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}}}}}}}},"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"5":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"9":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,"8":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"3":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"0":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"9":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4,"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}},"8":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":4},"9":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2,"8":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"(":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,".":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":5}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":3}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":3}}}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":11}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":6,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":8}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":2},"w":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":8}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":5}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":5}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2}}}}},"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":2}}}},"8":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"a":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1},"y":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":7}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.0}},"df":3,"c":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":3}},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2}}}}}}}}},"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.211102550927978},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":2,"1":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.681145747868608}},"df":1,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.605551275463989}},"df":1}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0}},"df":1}}}}}}}}}}}}},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3},"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}},"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.196152422706632},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.3166247903554}},"df":2,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"{":{"docs":{},"df":0,"{":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":3}}}},"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979}},"df":2,"s":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.0}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}},"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":3}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.1622776601683795}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/":{"tf":1.0},"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":4}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/range_function/":{"tf":5.291502622129181},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":6,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":2}},"k":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}}}},"{":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"b":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":8,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":3},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"â€“":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":4.69041575982343}},"df":4},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":7,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":8,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":7}}},"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413}},"df":2,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":5}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":6}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":6}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}}},"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":5.477225575051661},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":7}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":7,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1},"d":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":3}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.7416573867739413}},"df":7},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":2},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"{":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/range_function/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":4.58257569495584},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":9,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}},"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"1":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1},"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"1":{"docs":{},"df":0,"z":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}},"2":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"3":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"7":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"1":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":2}}},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.4031242374328485},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178}},"df":1}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":5}},"n":{"docs":{},"df":0,"!":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"'":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":6}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":3}},"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":4.58257569495584}},"df":8},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178}},"df":1}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":6}},"r":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":7,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0}},"df":1}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/range_function/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":4,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/":{"tf":1.0},"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":4.58257569495584},"https://ghlecl.github.io/posts/range_function/":{"tf":5.385164807134504},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":10}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951}},"df":1}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":9,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2,"3":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6},"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0}},"df":3,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":3,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"*":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":2}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":4,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0}},"df":3}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":4}},"x":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.744562646538029}},"df":3},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":5}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":6},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":5}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":3}}}}}}}}}}}}}},"u":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":8}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"s":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907}},"df":1}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2},"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{},"df":0,"z":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"2":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"2":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":3},"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"!":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":5,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":8},"m":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":2,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":6,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":6}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":6}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3},"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":3}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":8,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":7}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"s":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":1}}}}},"o":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2,"3":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":6}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":4,"e":{"docs":{},"df":0,")":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"w":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2},"o":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":5}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":4}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.8284271247461903}},"df":2}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.123105625617661}},"df":1}}},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178}},"df":1},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":5.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":6}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":3}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2}}}}},"t":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":9},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":8}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2},"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}},"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.4641016151377544}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4}},"n":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178}},"df":1},"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":3}},"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":5}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"s":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":2}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}},"w":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2},"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}},"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":10}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":11,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.291502622129181}},"df":2,")":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":1,"{":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0}},"df":3,"(":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":10}}}},"o":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":2,"t":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"8":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.3166247903554}},"df":2}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":9,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":1}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":3,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"/":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,"i":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.211102550927978},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":5.916079783099616},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/range_function/":{"tf":6.164414002968976},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":5.291502622129181},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8,"1":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3}},"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":2.0}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5}},"h":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":1,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":3}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":6,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":5}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":7,"'":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.0}},"df":1,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"{":{"docs":{},"df":0,"{":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"{":{"docs":{},"df":0,"{":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}},"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":6},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":2}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.416198487095663},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/range_function/":{"tf":7.3484692283495345},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.7416573867739413}},"df":8,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"*":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1,"1":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":3.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.1622776601683795}},"df":4}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":5,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951}},"df":1},"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.0}},"df":8,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}}},"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":2.6457513110645907}},"df":1}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":1}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":2.449489742783178}},"df":2}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3},"v":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951}},"df":1}},".":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":6,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":6,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903}},"df":2}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.477225575051661},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":9}}}}},"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0}},"df":1}}}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":6}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}},"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"x":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":7}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979}},"df":3}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":8},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/range_function/":{"tf":4.69041575982343},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.5677643628300215}},"df":5,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":2,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},")":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":4.123105625617661}},"df":2}},"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4},"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":5}}},"f":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}}},"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.656854249492381},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.48074069840786},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}}}},"l":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}},"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"[":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},"o":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3},")":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":8.246211251235321}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3}}}},"â€™":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"j":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1}}}},"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}},"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"y":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979}},"df":7,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":2}}}},"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":2}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.0}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":2,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}},"f":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":3},"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772}},"df":4}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1,"{":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}},"b":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":6.324555320336759}},"df":3,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8,"u":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.0}},"df":1}}},"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":8.246211251235321},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2,"4":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5},"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903}},"df":1,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}},"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":7.483314773547883},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.0}},"df":2}}},"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}},"=":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":5.830951894845301}},"df":1,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":3}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":12,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":3,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}},"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5}}}},"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}}},"y":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":6,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.6332495807108},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178}},"df":2}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.744562646538029}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979}},"df":1,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1,"'":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6},"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":2}}}},"x":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":5,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0}},"df":1},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0}},"df":1,"o":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"2":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":10}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":9}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":5.656854249492381}},"df":1}}},"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"6":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":9}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}}},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178}},"df":1}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":6}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":5}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"Ã¯":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":2}}},"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":9,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}}},"w":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":9,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.0}},"df":1}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":10},"h":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":8},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":9}},"s":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":2}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2},"b":{"docs":{},"df":0,"j":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.6332495807108}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"*":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"_":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.324555320336759},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":4,".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}},"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}}},"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.196152422706632},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/range_function/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":12,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4},"e":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.6457513110645907}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":5.916079783099616},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":4.898979485566356}},"df":6,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":7},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":5}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/static_site/":{"tf":2.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":11,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.385164807134504},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":4.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":5.0}},"df":5}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":3}},"d":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1},"g":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":2.8284271247461903}},"df":4,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1},"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"1":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.4641016151377544}},"df":1,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":3.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":5,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":5},"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}}},"y":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.1622776601683795}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}},"u":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":4.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":4.242640687119285}},"df":8,"!":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.615773105863909},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":4}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6,"y":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":3.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":9,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"k":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178}},"df":1}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}},"r":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":5}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":5,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1,"f":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907}},"df":2}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":9}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":6,"m":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":3}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":1}},"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}}},"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":4}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":3},"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.23606797749979}},"df":1},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":5}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907}},"df":3,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795}},"df":2},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}},"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"Ã©":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":9.219544457292887},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.8284271247461903}},"df":5,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979}},"df":1}},"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.872983346207417}},"df":1}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"k":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":6.164414002968976}},"df":1}},"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":11,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"z":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":6}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":8}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":6}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":7.280109889280518}},"df":5,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"3":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.6457513110645907}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":5,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":6.4031242374328485},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"{":{"docs":{},"df":0,"{":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":1}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":7}}}},"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":4.242640687119285},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772}},"df":1},"y":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.7320508075688772}},"df":2},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.0}},"df":4}},"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":4}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":7.3484692283495345}},"df":2}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1,"\\":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}},"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/range_function/":{"tf":4.58257569495584},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.872983346207417}},"df":9},"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.23606797749979}},"df":2}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1,"'":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":9}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":6,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},"5":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"6":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"8":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"8":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"{":{"docs":{},"df":0,"{":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":10,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":7},"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":5}}},"f":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.0}},"df":2}}}},"n":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772}},"df":1}}}},"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":6,"u":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772}},"df":1},"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.0}},"df":4,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"[":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":2,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.196152422706632}},"df":3,"e":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":1,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2}}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":4}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}},"i":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":9,"c":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":4}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":2.449489742783178}},"df":4},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.23606797749979}},"df":2}}}},"z":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":3,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.8284271247461903}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":4}},"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8},"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":2}},"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":6}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":5.385164807134504}},"df":9,"'":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":9,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":2.449489742783178}},"df":2,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"*":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"s":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}},"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":2}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}},"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979}},"df":3,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178}},"df":2}}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.3166247903554}},"df":1}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.1622776601683795}},"df":2}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.605551275463989}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":3.4641016151377544}},"df":3,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.6457513110645907}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}},"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":5.0}},"df":3,"_":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":8}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":1}}}},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3},"m":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":4.795831523312719},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.23606797749979}},"df":1},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":3,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772}},"df":3,"u":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":4,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}}},"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":8}}}}},"m":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":7},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":3}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.744562646538029},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795}},"df":3,"(":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":6}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":5.0990195135927845},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903}},"df":3,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.4641016151377544}},"df":1},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":3.4641016151377544}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":8,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":5}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}},"s":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2},"q":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}},"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":6}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":5.656854249492381},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/static_site/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":9,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951}},"df":6}}},"1":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.8284271247461903}},"df":2}}}}}}},"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1},"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":3,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.7320508075688772}},"df":1,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178}},"df":3,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"3":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"4":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"6":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"7":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1},"2":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"5":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}},"m":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"5":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/github_pages/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":10},"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":3.3166247903554}},"df":10}},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":8}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":9}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8}}}}},"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":7,"m":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"i":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":5.196152422706632},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":8,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.872983346207417}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979}},"df":1}}},"1":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":3.605551275463989}},"df":1}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"1":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1},"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1},"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3,"(":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":2}}},"y":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.449489742783178}},"df":1}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":10,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"1":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":8}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":10,"'":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":2,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"â€™":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":7.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":4.123105625617661},"https://ghlecl.github.io/posts/range_function/":{"tf":7.416198487095663},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":3.605551275463989},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":4.358898943540674},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":8.12403840463596}},"df":8,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":8.366600265340756},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/range_function/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0}},"df":5}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"{":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":2,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"8":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":7}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":2}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":2,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"6":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":7.3484692283495345}},"df":4,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":8,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":2}}},"s":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":6.48074069840786},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":4.898979485566356},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/range_function/":{"tf":8.246211251235321},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":4.0},"https://ghlecl.github.io/posts/static_site/":{"tf":2.6457513110645907},"https://ghlecl.github.io/posts/string_ctor/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.6457513110645907}},"df":13,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2}}}},"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":4}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.449489742783178}},"df":7,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}}}},"v":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":2}},"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":3}},"u":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/integer_representations/":{"tf":3.7416573867739413},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.872983346207417},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":4.123105625617661}},"df":7,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":4,"e":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":2},"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":3.605551275463989}},"df":1,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.0}},"df":2}}},"i":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772}},"df":5,"f":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":6}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":4,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":2,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1,"'":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.23606797749979}},"df":5}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":1}}}}}},"s":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.8284271247461903},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.47213595499958},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":2.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":11}},"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":3.1622776601683795},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":2.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":11,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}},"c":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.4142135623730951}},"df":1},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"b":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951}},"df":2}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":5}},"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":4}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1,"'":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":4}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":4}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951}},"df":3,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":4.358898943540674},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.3166247903554},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":11,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":5}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":2,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"*":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/about/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.0},"https://ghlecl.github.io/posts/range_function/":{"tf":3.4641016151377544},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/static_site/":{"tf":2.449489742783178},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.7320508075688772}},"df":13},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/range_function/":{"tf":1.7320508075688772},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/static_site/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.4142135623730951}},"df":7}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":7}},"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0},"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4}}}}},"x":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/range_function/":{"tf":4.898979485566356}},"df":2,"*":{"docs":{},"df":0,"*":{"docs":{},"df":0,"2":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"f":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}},"{":{"docs":{},"df":0,"0":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":2.0}},"df":6}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"'":{"docs":{},"df":0,"v":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"o":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.4142135623730951},"https://ghlecl.github.io/posts/integer_representations/":{"tf":2.23606797749979},"https://ghlecl.github.io/posts/range_function/":{"tf":1.4142135623730951}},"df":3}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":2.449489742783178}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}}}},"title":{"root":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0},"https://ghlecl.github.io/posts/range_function/":{"tf":1.0},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/":{"tf":1.0},"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/friends_only_class/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://ghlecl.github.io/posts/cpp_invoke/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/github_pages/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/range_function/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://ghlecl.github.io/posts/integer_representations/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://ghlecl.github.io/posts/static_site/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://ghlecl.github.io/posts/string_ctor/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/cpp_time_it/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://ghlecl.github.io/posts/return_type_overload/":{"tf":1.0},"https://ghlecl.github.io/posts/usual_conversions/":{"tf":1.0}},"df":2}}}},"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://ghlecl.github.io/posts/conveting_to_zola/":{"tf":1.0}},"df":1}}}}}}},"documentStore":{"save":true,"docs":{"https://ghlecl.github.io/":{"body":"","id":"https://ghlecl.github.io/","title":"Code Attempts"},"https://ghlecl.github.io/about/":{"body":"Hi.\nI'm Ghys, a French Canadian living in the province of QuÃ©bec, Canada.\nI make a living as a medical physicist.\nI like trying to get computers to do the actual data crunching for me.\nI am a hobbyist programmer and this blog is mostly a way for me to write down notes and lessons about my code attempts.\nI also write about random stuff.\nFeel free to read or skip whatever you want!\n","id":"https://ghlecl.github.io/about/","title":"About me"},"https://ghlecl.github.io/posts/":{"body":"","id":"https://ghlecl.github.io/posts/","title":"Posts"},"https://ghlecl.github.io/posts/conveting_to_zola/":{"body":"Zola\nI haven't had (or taken really) the time to write anything technical in the last few years.\nThe pandemic definitely did have an impact on me, but also work.\nI was not in a frame of mind to program at home, much less write about it.\nBut lately, I've felt better and I am getting back into that hobby of mine.\nIn the interim, the static site generator that I was using (Hugo) upgraded quite a few times, so much so that a bunch of warnings/errors came up when I tried it again to update my site.\nThis was a reminder that I don't actually understand fully the tool I'm using and that I could probably understand better.\nGiven that I would had to change things anyhow, I allowed myself to look at alternatives and came up on Zola.\nOne thing that I did not like much about Hugo was the templates.\nIt is based on the Go templating language.\nZola is based on the Tera templating engine which itself is based on the popular Jinja, which I find more intuitive.\nSo I decided to try and switch.\nOne thing I did not want to change was the layout of the site.\nI quite like the style of the Hugo theme I was using: Internet-Weblog.\nSo I set out to replicate it, mostly, but did change a few things.\nFirst, I abandoned microposts, since I realized I have short posts, but nothing micro.\nI did not use some of the features of the theme, so I did not put them in and kept the basic minimum.\nThen, I have changed the RSS feed for an Atom feed.  Hoping this will not be too problematic.\nI probably had one, maybe two subscribers, so I doubt it will affect that many people.\nI also added a link footnote system so that the footnotes are clickable and there is a back link after the note to get back to the text.\nI also changed the colors of the code samples and the highlighting.  I use a tomorrow night like color scheme (which, incidentally, I like to use in my editors as well).\nOne thing I couldn't achieve is the exact same pagination.\nThis is a technical limitation of Zola.\nIt might change in the next versions, but for now, the about page is now considered a \"post\" just like the rest of the posts.\nIf the limitation in Zola is lifted, I'll remove it.\nFor now, I've artificially set the date of the about page to be before any other post, so that it is at the end of the pagination.\nOther than those, I don't think there is much change.  Still, thought I would mark the change by this short post to remember when it happened.\n","id":"https://ghlecl.github.io/posts/conveting_to_zola/","title":"Converting to Zola"},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"body":"Counting chars in first n lines\nI was coding in one of my projects and wanted to make sure that the position I was finding in a file was correct.\nIn a first attempt, I tried copy-pasting the content of the file up to the position I was searching for into Microsoft Excelâ„¢ to find the length of the resulting string.\nTurns out a naive copy-paste does not preserve whitespace.\nI then thought of writing a small application to do what I wanted: open a file, read the n first lines and find the total number of characters (bad reflex, I know).\nIn trying to figure out the command line interface for this, I realized first that it would be a lot of work for something that I might not use often and second, that there might be an easier way on a *Nix system.\nThis lead me to simply using the applications head and wc as follows:\nhead -n &lt;line_count&gt; | wc -m\n\n","id":"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/","title":"Count chars in lines"},"https://ghlecl.github.io/posts/cpp_invoke/":{"body":"Invoking a callable in C++\nThis is my exploration of the std::invoke utility of C++17.\nI started with something vaguely related (which I am discussing here) and ended up reading the standard library implementation of std::invoke (and that of Google's Abseil library).\nThe funny thing is that in the end, I decided I did not really need any of it for my original motivation, but I did gain some knowledge along the way, so worth the time!\nMy original motivation\nEven though there are reasons not to have container based algorithms in the C++ standard library (upcoming ranges being one more reason), in my code, I find my main use case for the algorithms is still to work on the whole container.\nBecause of that, I was looking into ways to get whole container overloads for the algorithms.\nIn that endeavor, I stumbled upon this solution.\nIn the usage examples at the bottom of the code, one finds two usage syntaxes:\napply_on( bobs, for_each, std::mem_fn( &amp;Bob::stuff) );\nfor_each_on( bobs, std::mem_fn( &amp;Bob::stuff ) );\n\nwhere the for_each_on is obviously not in the std namespace.\nThis is very close to what I am looking for, which is a function with the name for_each that will simply forward its call to the std::for_each, but will work on the whole container rather than asking for two iterators.\nSomething that would look like that:\nfor_each( bobs, &amp;Bob::stuff );\n\nwhere this for_each is not the one in namespace std (but shares its name with it as opposed to the for_each_on function in the solution I found online).\nIn adapting/inserting this solution to my code, I realized that the custom apply_on function I found online is pretty much a particular case of C++17's std::invoke.\nSince I am not interested in directly using the apply_on function as shown in the examples of the online solution, I thought I should just adapt it to use std::invoke.\nUnfortunately, at work, not all the external libraries that our projects depend on have transitioned to C++17.\nTherefore, to use std::invoke, I needed a working C++11 implementation (which would of course then not be in the std namespace, but I digress).\nTurns out it is not that hard to find a C++11 implementation.\nThat said, before using any of them, I wanted to make sure I understand the concepts so that I can provide support if necessary.\nThus, I set out to read and understand those implementations.\nIn the process, I came up with my own, which I am discussing here.\nI do not pretend this implementation is superior or even on par with the others I have seen (and certainly not with the standard library implementations out there), but from the tests I have made (comparing\nwith Clang's implementation on a C++17 compiler I have access to), it seems to be as capable (probably did not think of every conceivable test).\nIt might, however, be very slow to compile and suboptimal.\nSyntax(es) of a \"call\" in C++\nBefore I embarked on this journey, I had never needed to make function calls through function pointers or member pointers.\nI have had the luxury/luck of working only on newer projects that did not involve that many callbacks.\nLambdas have mostly always been available to me, so I was not familiar with the various call syntaxes of function pointers, member pointers and the like.\nSince I could use lambdas, when I needed to call some member function on all the elements of a\nvector, for instance, I just created a lambda doing exactly that and never considered using a pointer to the member.\nThus, my first hurdle was understanding the problem space of calling something in C++.\nAlthough the section on the magical INVOKE entity1 in the C++ 17 standard (which is section 23.14.3&nbsp;Requirements&nbsp;([func.require])) has seven bullet points, when looking at the bigger picture, I think it is a useful approximation to summarize by saying there are three call syntaxes in C++:\n\nfunction call syntax\nmember function pointer call syntax\nmember object pointer call syntax\n\nwhere member object is roughly standardese for data member.\nTranslated in pseudo code, the three syntaxes above look like this:\ninvocable( arguments );           // function syntax\nobject.*invocable( arguments );   // member function pointer syntax\nobject.*invocable;                // member object pointer syntax\n\nThe first syntax can be applied to any invocable that is not a member, be it a regular function, a function pointer, a lambda or a struct defining a call operator (operator()).\nThe two others are used when dealing with pointers to member.\nWhether one is dealing with a pointer to member function or to member object, the standard allows using said pointer to call \"into\" an object of a related type either directly, through a std::reference_wrapper or through a pointer.\nIn other words, there is a clause in the standard for each of the following calls (again in pseudo code):\n(object.*invocable)( arguments )         // object\n(wrapper.get().*invocable)( arguments )  // std::reference_wrapper\n(*pointer.*invocable)( arguments )       // pointer to object\n\nobject.*invocable           // object\nwrapper.get().*invocable    // std::reference_wrapper\n*pointer.*invocable         // pointer to object\n\nNote that the parentheses in the first three lines are necessary because the function call operator (i.e. operator()) has lower precedence than the pointer-to-member operator (i.e. operator.*).\nIf the parentheses were not there, i.e. if the first line were written object.*invocable( arguments ) instead of the current syntax, then the order of operations would be invocable( arguments ) before object.*invocable, and that would error out: the compiler would rightfully complain that the type of invocable is not a callable because it would not access the member before trying to call it.\nAdding the general function call syntax to the list above, one gets a total of seven call syntaxes, one per bullet point of the standard.\nIn the end, a conforming implementation of std::invoke must provide this single function template which will, based on the type of its parameters and arguments, use the correct call syntax for the situation.\nGetting there is not as easy as it seems (underestimating implementation difficulty is a recurring theme for me...).\nIn all the C++11 implementations I have seen, it involves at least SFINAE and function template partial ordering.\nIn C++17, using constexpr if, it is possible to have a simpler implementation (see cppreference.com possible implementation), but, as mentioned, that was not a possibility for me.\nBefore reading on (if you are still interested), I would suggest reading up on SFINAE (specifically the std::enable_if technique/idiom), and maybe a little on function template partial ordering.\nI do not explain the former at all, while I do say a little bit on the latter as I have discovered it while understanding the implementations of invoke and this blog serves a bit as my note-taking!\nC++17's std::invoke\nThe naÃ¯ve starting point\nConsidering only the function call syntax, the function template needed can be\nas simple as:\ntemplate&lt; typename Invocable, typename... Args &gt;\nauto invoke( Invocable invocable, Args... args )\n   -&gt; decltype( invocable( args... ) ) {\n   return invocable( args... );\n}\n\nAlthough it will work for the function call syntax, this implementation is naÃ¯ve, not taking into account argument passing efficiency (perfect forwarding) or noexcept specification.\nIt will also obviously fail for any other syntax in the list presented in the previous section.\nWe need to have other specializations or overloads which will handle the other call syntaxes.\nSince it is a function template and not a class/struct template, it is not possible to partially specialize it.\nI do not think it is possible to use full specialization to create the overload set needed, but I might be wrong.\nThat said, it is however possible to overload it and select the appropriate overload via SFINAE or function template partial ordering, which is what I have seen in most implementation, and what is explored next.\nMember pointers\nAs written above, the invoke function will not work for member pointers.\nDifferent approaches can be taken to deal with this problem and allow the function to be called with other member pointers.\nOne way is to write an overload of the function which will not take just any invocable as an argument, but only member pointers.\nThis overload will still need to be a template to accommodate member pointers of any type and some mechanism is needed to insure that the template is selected only when called with a member pointer.\nOne way to achieve this is through function template partial ordering, which is what most implementations that I have seen have used.\nSince I have been influenced by those implementations, I did the same.\nThere could have been alternatives, for instance SFINAE.2  That said, I went with partial ordering.\nThis concept relies on template parameters and function arguments being such that one function is considered more specialized than the other.\nThe algorithm for partial ordering is well explained in this StackOverflow answer.\nAs stated in the answer, a comment of the original question gives a pretty good description of the concept:\n\nPartial ordering basically checks in the parameters of two templates, if the parameter of one is more restrictive than the corresponding parameter of the other.\nIf you have f(T) and f(bar&lt;T&gt;) (with T as a template parameter), then the first overload can take all possible arguments of the second overload, but the second overload can't take all possible arguments from the first overload - only those of the bar&lt;T&gt; form.\n\nPutting aside perfect forwarding and the noexcept specification for now (we'll come back to them in the end), an overload of the function template which uses function template partial ordering can be written like this:\ntemplate&lt; typename MemPtr, typename Obj, typename Arg1, typename... Args &gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args )\n   -&gt; decltype( (arg1.*invocable)( args... ) ) {\n   return (arg1.*invocable)( args... );\n}\n\nThe template parameters are the member pointer type (MemPtr), the type pointed into by the member pointer (Obj), the object type the pointer is called on (Arg13) and the subsequent argument types (Args...), if any.\nFor plain function pointers, this deduction will fail because the first function argument will not be a match, and the original overload will be selected.\nFor member pointers, the substitution will succeed and this overload will be considered more specialized, and it will be selected as intended.\nNote again the parentheses around the arg1.*invocable both in the decltype and in the template body.\nAs mentioned in the previous section, those are mandatory.\nAlthough this template does work, in its current form, it will be selected whenever invoke is called with a member pointer as its first argument, even if the object you want to invoke the pointer on (the second argument to invoke which has type Arg1) is unrelated to the type the pointer points into (type Obj).\nThis is a problem because for arbitrary unrelated types, using the function pointer from one type on the other will fail to compile.\nTo prevent this overload from being selected when the types are unrelated, SFINAE can be used.\nTo do this, a defaulted template parameter is added after the parameter pack and defaulted to enable_if_t4 with a predicate to filter out the cases that should not match. In this case, the predicate is std::is_base_of&lt; Obj, Arg1 &gt; and the solution looks like this:\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; std::is_base_of&lt; Obj, Arg1 &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args )\n   -&gt; decltype( (arg1.*invocable)( args... ) ) {\n   return (arg1.*invocable)( args... );\n}\n\nwhere we can bikeshed my formatting some other time! ðŸ™‚\nWith this in place, this overload will not be selected when there is no inheritance (or identity) relationship between the member pointer object type (Obj) and the invoked-on object type (Arg1).\nAlright, this overload is a step in the right direction, but it still cannot be used with member object pointers.\nThat is because the call syntax is wrong: there must not be an argument list after the invocable.\nIf we want to have member object pointers working, there has to be a third overload with the appropriate call syntax.\nIf there is a third overload, there needs to be a way to select it when needed, and one cannot rely only on the function template partial ordering, since this will distinguish between callables and member pointers, but not between different member pointers, since they have the same syntax in the function argument list.\nFor this, we must rely once more on SFINAE and the standard library type traits, adding one more defaulted template parameter after the parameter pack for one of the overloads:\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; std::is_base_of&lt; Obj, Arg1 &gt;::value &gt;,\n   typename = enable_if_t&lt; std::is_member_function_pointer&lt; MemPtr Obj::* &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args )\n   -&gt; decltype( (arg1.*invocable)( args... ) ) {\n   return (arg1.*invocable)( args... );\n}\n\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename = enable_if_t&lt; std::is_base_of&lt; Obj, Arg1 &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1 )\n   -&gt; decltype( arg1.*invocable ) {\n   return arg1.*invocable;\n}\n\nIt should be noted that using the predicate std::is_member_object_pointer on the last overload instead would have also worked.\nNow, the overload set of the three invoke functions defined above will be callable on anything that has the free function syntax, the member function pointer syntax or the member object (a.k.a. data member) pointer syntax, if the latter two are used directly with an object of the appropriate type (i.e. a type the member pointer points into or a type derived from it).\nThis constitutes only three of the seven syntaxes mandated by the standard.\nNone of the overloads will work if the object to call the member pointer on (arg1) is a std::reference_wrapper of such an object or a pointer to such an object.\nStill some distance to go.\nInvoked-on object type\nIf you have felt like this is getting verbose already, you are not going to like the rest of this blog post.\nBasically, for each of the two last overloads, three variants are needed (the one already defined and two more):\n\none that can be called with an object of the type the member pointer points\ninto (or a type derived from it),\none that can be called with a std::reference_wrapper to an object of the\ntype the member pointer points into (or a type derived from it),\nor one that can be called on a pointer to an object of the type the member\npointer points into (or a type derived from it).\n\nExpressed in a more concrete way, considering the invoke overloads as defined above and using the argument types in their declarations, the previous text means that if Arg1 is of the type Obj or a type derived from it, invoke should be able to call the member pointer with\n\nan object of type Arg1,\nan object of type std::reference_wrapper&lt; Arg1 &gt;\nor an object or type *Arg1.\n\nAs mentioned, the first case (i.e. object) is already written.\nLet us tackle the last two.\nstd::reference_wrapper\nTo handle the second case (i.e. std::reference_wrapper, one has to write a template working on member pointers which will be selected only when the second argument is a std::reference_wrapper to an object of an appropriate type, and SFINAE away otherwise.\nAgain, function template partial ordering is used to distinguish between function call syntax and member pointer syntax.\nThe new challenge is to find a way for the overload to be selected only when the second argument's type is a std::reference_wrapper.\nThis kind of requirement has been solved with enable_if_t in the previous sections and the same technique can be applied here: add a defaulted template parameter after the parameter pack and default it to enable_if_t with an appropriate predicate.\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; is_reference_wrapper&lt; Arg1 &gt;::value &gt;,\n   typename = enable_if_t&lt; std::is_member_function_pointer&lt; MemPtr Obj::* &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args )\n   -&gt; decltype( (arg1.get().*invocable)( args... ) ) {\n   return (arg1.get().*invocable)( args... );\n}\n\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename = enable_if_t&lt; is_reference_wrapper&lt; Arg1 &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1 )\n   -&gt; decltype( arg1.get().*invocable ) {\n   return arg1.get().*invocable;\n}\n\nUnfortunately, there is no type trait in the standard library to determine if a type is a std::reference_wrapper.\nSuch a type trait can be written like this:\ntemplate &lt;class T&gt;\nstruct is_reference_wrapper : std::false_type {};\n\ntemplate &lt;class U&gt;\nstruct is_reference_wrapper&lt; std::reference_wrapper&lt; U &gt; &gt; : std::true_type {};\n\nwhich would probably be put in a detail namespace as this does not need to be used by user code.\nWith this type trait and the definition above, the calls where the invoked-on object type is std::reference_wrapper work.\nPointer to object\nOne would think the last case is handled the same way simply by replacing the type trait used in the enable_if_t by the std::is_pointer type trait of the standard library, but in most implementations I have seen, it is not the case.\nI believe the reason is that testing with std::is_pointer will yield false for smart pointers even if the invoked-on pointer syntax should actually work for them.5\nOne could test for every smart pointer in the standard library inside the predicate of the enable_if_t, but that would needlessly prevent user defined smart pointers to be used, and the standard library implementer (or the one implementing invoke) cannot reliably test for every user defined smart pointer.\nThus, the implementations usually check that they are neither in the first nor in the second cases (i.e. neither directly on an appropriately typed object nor on a std::reference_wrapper to one such object), and direct any other invoked-on object type to the last case.\nThis can be done once more using defaulted template parameters after the parameter pack in combination with SFINAE, much like this:\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; !std::is_base_of&lt; Obj, Arg1 &gt;::value &gt;,\n   typename = enable_if_t&lt; !is_reference_wrapper&lt; Arg1 &gt;::value &gt;,\n   typename = enable_if_t&lt; std::is_member_function_pointer&lt; MemPtr Obj::* &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args )\n   -&gt; decltype( (*arg1.*invocable)( args... ) ) {\n   return (*arg1.*invocable)( args... );\n}\n\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename = enable_if_t&lt; !std::is_base_of&lt; Obj, Arg1 &gt;::value &gt;,\n   typename = enable_if_t&lt; !is_reference_wrapper&lt; Arg1 &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1 )\n   -&gt; decltype( *arg1.*invocable ) {\n   return *arg1.*invocable;\n}\n\nwhere the first condition of !std::is_base_of&lt; Obj, Arg1 &gt;::value ensures this is not the direct object case, and the second condition is the opposite of the one used in the std::reference_wrapper case (thus insuring it is not selected in that case).\nThis is the last of the syntaxes to cover, and so this is a working implementation of invoke which covers all cases mandated by the standard.\nThat said, some things can be made better.\nIf you are interested, read on.\nPerfect forwarding\nIn order to be more efficient and prevent argument copies, perfect forwarding should be introduced into the mix.\nTo get perfect forwarding, one must use universal6 forwarding references, and use std::forward on the arguments inside the implementation.\nIn what follows, the function call syntax and the member function pointer syntax are explored, both with a direct object case.\nAll other cases (i.e. member object call syntax and other invoke-on object types) can be modified to use perfect forwarding the same way, so in the name of brevity, they are not explicitly covered here.\nAdding forwarding reference to the function argument list (i.e. &amp;&amp;) and using std::forward in the implementation, the invoke template for the two situations covered can introduce perfect forwarding by being modified like this:\ntemplate&lt; typename Invocable, typename... Args &gt;\nauto invoke( Invocable&amp;&amp; invocable, Args&amp;&amp;... args )\n   -&gt; decltype(\n         std::forward&lt;Invocable&gt;(invocable)( std::forward&lt;Args&gt;(args)... )\n   )\n{\n   return std::forward&lt;Invocable&gt;(invocable)( std::forward&lt;Args&gt;(args)... );\n}\n\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; std::is_base_of&lt; Obj, decay_t&lt; Arg1 &gt; &gt;::value &gt;,\n   typename = enable_if_t&lt; std::is_member_function_pointer&lt; MemPtr Obj::* &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::*&amp;&amp; invocable, Arg1&amp;&amp; arg1, Args&amp;&amp;... args )\n   -&gt; decltype(\n         (std::forward&lt; Arg1 &gt;(arg1).*std::forward&lt; MemPtr Obj::* &gt;(invocable))\n                                             ( std::forward&lt; Args &gt;(args)... )\n   )\n{\n   return (std::forward&lt; Arg1 &gt;(arg1).*std::forward&lt; MemPtr Obj::* &gt;(invocable))\n                                             ( std::forward&lt; Args &gt;(args)... );\n}\n\nHonestly, the main difficulty becomes formatting and indentation: I find nothing is satisfactory.\nI should probably just let ClangFormat do it for me.\nIn any case, there are two things worth noticing.\nThe first is the position of the ... when forwarding the parameter pack.\nIf you are familiar with calling functions parameter packs, it is not surprising, but if you've never dealt with this kind of things, it can trip you at first.\nThe second is the use of decay_t7 in the std::is_base_of SFINAE condition in the second overload.\nThis is now necessary because the type Arg1 can now be deduced to be a reference and the predicate will be false in that case if you do not remove the reference modifier to the type.\nEssentially:\nstd::is_base_of&lt; Arg1, Arg1&amp;            &gt;::value == false\nstd::is_base_of&lt; Arg1, decay_t&lt; Arg1&amp; &gt; &gt;::value == true\n\nOther than those two little difficulties, there is nothing very surprising about the modifications to the original function if you are already familiar with perfect forwarding.\nIf you are not, go read up on it (I have a past blog post about rvalues and perfect forwarding).\nnoexcept specification\nOne final thing that I looked into is getting the noexcept specifier correct using the noexcept operator.\nHere is what it looks like for the same cases perfect forwarding was explored with:\ntemplate&lt; typename Invocable, typename... Args &gt;\nauto invoke( Invocable&amp;&amp; invocable, Args&amp;&amp;... args )\n   noexcept(\n      noexcept(\n         std::forward&lt;Invocable&gt;(invocable)( std::forward&lt;Args&gt;(args)... )\n      )\n   )\n   -&gt; decltype(\n         std::forward&lt;Invocable&gt;(invocable)( std::forward&lt;Args&gt;(args)... )\n   )\n{\n   return std::forward&lt;Invocable&gt;(invocable)( std::forward&lt;Args&gt;(args)... );\n}\n\ntemplate&lt;\n   typename MemPtr,\n   typename Obj,\n   typename Arg1,\n   typename... Args,\n   typename = enable_if_t&lt; std::is_base_of&lt; Obj, decay_t&lt;Arg1&gt; &gt;::value &gt;,\n   typename = enable_if_t&lt; std::is_member_function_pointer&lt; MemPtr Obj::* &gt;::value &gt;\n&gt;\nauto invoke( MemPtr Obj::*&amp;&amp; invocable, Arg1&amp;&amp; arg1, Args&amp;&amp;... args )\n   noexcept(\n      noexcept(\n         (std::forward&lt; Arg1 &gt;(arg1).*std::forward&lt; MemPtr Obj::* &gt;(invocable))\n                                             ( std::forward&lt; Args &gt;(args)... )\n      )\n   )\n   -&gt; decltype(\n         (std::forward&lt; Arg1 &gt;(arg1).*std::forward&lt; MemPtr Obj::* &gt;(invocable))\n                                             ( std::forward&lt; Args &gt;(args)... )\n   )\n{\n   return (std::forward&lt; Arg1 &gt;(arg1).*std::forward&lt; MemPtr Obj::* &gt;(invocable))\n                                             ( std::forward&lt; Args &gt;(args)... );\n}\n\nand now the indentation is really screwed up.\nAnother annoying thing that the reader might notice is that you basically have to write the implementation of the function thrice (see Vittorio Romeo's lightning talk about that).\nNot all that DRY, but hey!\nBeyond std::invoke\nI am sure there are other things that could be improved in this implementation\nof invoke.\nFor instance, from Vittorio's talk, I realized that my implementation is not constexpr friendly.\nThat said, while it might not be a conforming implementation, it is a working one, and it is a more general version of the apply_on template in my motivating use case (which, as I said, was vaguely related).\nWriting this implementation made me learn a lot.\nGeneric function calling in C++ is a large subject where inspiration could come from other languages as well.\nFor instance, at C++Now 2018, Matt Calabrese presented a library (Argot) he is working on which seeks to provide better language ergonomics for invoking things, any callable.\nAlready, in 2016, he was making a proposal to the standards committee about unifying std::invoke, std::apply, and std::visit, and then 2017, again at C++ Now, he was giving a talk about the beginnings of a similar library (if not the same library) called Call.\nIn this work, he not only explores how to provide a more uniform way to invoke things, but he also explores, amongst other things, argument unpacking from tuples much like in Python.\n# Function taking 4 arguments and printing them\ndef fn(a, b, c, d):\n   print( a, b, c, d )\n \n\nmy_list = [ 1, 2, 3, 4 ] \n# Unpacking list into four arguments\nfn( *my_list )\n\nFrom his 2018 C++ Now talk, I gather he is not ready to submit such an addition to the language and/or the standard library at this point, but I find his ideas interesting and will try to stay informed (although I am far from that level of C++).\nAnyhow, I hope this post was of some interest. As Jon Kalb would say: safe coding!\n\nAcknowledgments\nI would like to thank Seph De Busser for taking the time to read this post before I published it and reassuring me that the mistakes in there were not too bad. ðŸ™‚\nNotes\n[1]&nbsp;I think INVOKE is not strictly the same as std::invoke, although I find this confusing.\nAs far as I can tell, INVOKE was in the standard before std::invoke and represents the idea of calling something.\nstd::invoke is just the library implementation of this idea.\nI could not find an appropriate name for such an entity.&nbsp;â†©ï¸Ž\n[2]&nbsp;For SFINAE, it would be easy to add a third defaulted template parameter after the parameter pack in the original definition of the previous section.\nSomething like:\ntemplate&lt;\n   typename Invocable,\n   typename... Args,\n   typename = enable_if_t&lt; !std::is_member_pointer&lt; decay_t&lt; Invocable &gt; &gt;::value &gt;\n&gt;\nauto invoke( Invocable invocable, Args... args )\n   -&gt; decltype( invocable( args... ) ) {\n   return invocable( args... );\n}\n\nI would have put it in this overload instead of putting the opposite verification in every other overload.\nIf you are wondering why the decay_t is used, see the main text.&nbsp;â†©ï¸Ž\n[3]&nbsp;In the following function template declaration:\ntemplate&lt; typename MemPtr, typename Obj, typename Arg1, typename... Args &gt;\nauto invoke( MemPtr Obj::* invocable, Arg1 arg1, Args... args );\n\nthe type the pointer points into (Obj) and the type of the object the pointer will be invoked on (Arg1) are not necessarily the same, since a derived object could be used with invoke.\nThus, they must be different template parameters to allow the compiler to deduce different types.&nbsp;â†©ï¸Ž\n[4]&nbsp;One might have noticed that I said I was limiting myself to C++11, but I use the C++14 enable_if_t and decay_t helpers of std::enable_if and std::decay.\nThose helpers are so useful that I usually define and use them even in C++11.\nThe _v helpers cannot be defined in C++11, but the _t helpers work perfectly.\nThe two of interest in this code can be defined like this:\ntemplate&lt; bool B, typename T = void &gt;\nusing enable_if_t = typename std::enable_if&lt; B, T &gt;::type;\n\ntemplate&lt; typename T &gt;\nusing decay_t = typename std::decay_t&lt; T &gt;::type;\n\n&nbsp;â†©ï¸Ž\n[5]&nbsp;Provided you use the right semantics, e.g. you std::move the std::unique_ptr.&nbsp;â†©ï¸Ž\n[6]&nbsp;I still prefer the previous term... sigh.&nbsp;â†©ï¸Ž\n[7]&nbsp;See note 4.&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/cpp_invoke/","title":"Invoking a callable in C++"},"https://ghlecl.github.io/posts/cpp_time_it/":{"body":"Execution time measurements\nPython's timeit and repeat\nI sometimes want to time my code to see which version of a function I wrote runs faster.\nI know that you should always profile before you optimize and that micro-benchmarking has lots of caveats (some of which I have myself fallen victim to), but still, sometimes, curiosity gets the best of me and I just have to know.\nWhen I am writing in Python, I use the timeit module to measure code execution.\nThis handy module has two main utility functions: timeit and repeat.\ntimeit will run a piece of code n times while measuring the execution time of each repetition.\nIt then gives back the lowest time, which is arguably the time needed to run the code when nothing else on the system is interfering.\nOf course, when the code will be run, other things will want CPU time alongside your program and the OS will have to balance it all, but usually, that should not be taken into account when doing micro-benchmarks.\nrepeat will again run a piece of code n times, but will repeat that experiment r times, returning a list with the lowest execution time of each repetition of the experiment.\nThe following snippet shows how to use both of them in code.\nfrom timeit import timeit, repeat\n\nn = 1000\nr = 2\ntimes_repeat = repeat( \"def Fn( x ): return x**2;myFn( 4 )\", repeat = r, number = n )\ntimes_timeit = []\nfor idx in range( r ):\n    times_timeit.append( timeit( \"def Fn( x ): return x**2;myFn( 4 )\", number = n ) )\n\nThere are two other ways to use the timeit module, namely via the command line with the executable module syntax and using an interactive Python shell like iPython which has the magic function %timeit.\nI won't cover those subjects here.\nTrying it out in C++: time_it\nThe thing is, I don't always do things in Python and I wanted to have a function similar to timeit which would allow me to measure the execution time of a function or piece of code in C++.\nIt turns out that with C++14 (don't know if C++11 is sufficient, but C++17/C++1z will make it easier I think), it is possible to get close to it.\nWhen I got the idea, I started to think about the proposed std::invoke function that should (or has?) make it into the next standard.\nThis function template takes a function, it's arguments and invokes it.\nThis is pretty close to what I need.\nCoupling the facilities of std::chrono with that function could actually get me pretty close to what I want.\nBecause some compilers do not yet have an implementation of std::invoke, I had to first find one or write one.\nI decided to use the implementation found on cppreference.com.\nBut let's pretend that std::invoke is available.\nThen, one can write the function template time_it1 using std::invoke and std::chrono.\nThis is the resulting function for those who do not want to read the steps I went through:\ntemplate&lt;\n   unsigned int repeat_invoke = 1000,\n   unsigned int repeat_meas = 3,\n   typename F, typename... ArgTypes\n        &gt;\nstd::array&lt; double, repeat_meas &gt;\ntime_it( F&amp;&amp; f, ArgTypes&amp;&amp;... args )\n{\n   using std::chrono::high_resolution_clock;\n   using std::chrono::duration_cast;\n   using std::numeric_limits;\n   using std::chrono::nanoseconds;\n\n   static_assert( repeat_invoke &gt;= 1,\n            \"time_it: The number of times the code experiment is \\\n                                          repeated has to be at least 1.\" );\n   static_assert( repeat_meas &gt;= 1,\n            \"time_it: The number of times the code is run has to \\\n                                                          be at least 1.\" );\n\n   double max_dbl = numeric_limits&lt;double&gt;::max();\n   double cur_min = max_dbl;\n   std::array&lt; double, repeat_meas &gt; shortest_times;\n   for( unsigned int meas_idx( 0 ); meas_idx != repeat_meas; ++meas_idx )\n   {\n      for( unsigned int invoke_idx( 0 ); invoke_idx != repeat_invoke; ++invoke_idx )\n      {\n         auto start = high_resolution_clock::now();\n\n         std::invoke( std::forward&lt;F&gt;(f), std::forward&lt;ArgTypes&gt;(args)... );\n\n         auto elapsed = duration_cast&lt; nanoseconds &gt;(\n                        high_resolution_clock::now() - start ).count();\n\n         if( elapsed &lt; cur_min ) { cur_min = elapsed; }\n      }\n      shortest_times[meas_idx] = cur_min;\n      cur_min = max_dbl;\n   }\n\n   return shortest_times;\n}\n\nI skipped the includes in this code snippet.\nI am not pretending this code is exception safe, thread safe or any other kind of safe there is.\nI am not suggesting anybody else should use it.\nIt's simply something I find useful.\nHow I got there\nBasically, aside from the boiler plate stuff, the function is one that takes another function and its parameters as input, and then outputs the minimum time taken to execute the code.\nThe initial declaration could be written as follows:\ntemplate&lt; typename F, typename... ArgTypes &gt;\ndouble time_it( F&amp;&amp; f, ArgTypes&amp;&amp;... args );\n\nThis definition uses variadic templates.\nYou can find information on variadic templates on various sites.\nThe problem I had with that first iteration is that I could not specify the number of repetitions or the number of times I wanted to run the timing experiment (equivalent to the n and r parameters of Python's timeit).\nI had to find a way to do that which would allow for default values as well, since I did not want to specify those arguments every time I call the function.\nTo be able to use default values in C++, the defaulted parameters have to be last (no keyword arguments in C++ land).\nThat presented a problem because I also have to have a parameter pack.\nSo to work around that, I introduced two defaulted template arguments like this:\ntemplate&lt;\n   unsigned int repeat_invoke = 1000,\n   unsigned int repeat_meas = 3,\n   typename F,\n   typename... ArgTypes\n        &gt;\nstd::array&lt; double, repeat_meas &gt;\ntime_it( F&amp;&amp; f, ArgTypes&amp;&amp;... args );\n\nSorry for the reformatting of the template declaration.\nI must admit I struggle to have a consistent formatting for templates.\nI find nothing is completely satisfying.\nI should probably just use Clang Format.\nAnyhow, back to my function.\nThe addition of the two template arguments allowed me to change the return type to an array and I now have the functionality I want: I can specify, albeit as template parameters, the number of repetitions and the number of invocations at the call site.\nAll that was left to do was write the timing code, since the function invocation itself is simply:\nstd::invoke( std::forward&lt;F&gt;(f), std::forward&lt;ArgTypes&gt;(args)... );\n\nThe use of std::forward in the code here is for efficiency.\nThe timing code is based on std::chrono::high_resolution_clock.\nI chose to simply record the time before the invocation with std::chrono::high_resolution_clock::now() and do the same after.\nThe difference is the elapsed time.\nThe choice of the clock could be discussed.\nThe most important thing is for the clock to be steady.\nExample / test\nI have written a function which will make the current thread sleep for ten milliseconds.\nThen, I have used my new time_it function to time the execution of the defined function.\nThe code is reproduced here and actually serves as a usage example.\nThere are also two calls with a lambda function, one taking arguments.\nvoid my_fn()\n{\n   using namespace std::chrono_literals;\n   std::this_thread::sleep_for( 10ms );\n}\n\nint main( int argc, char* argv[] )\n{\n   // get times\n   auto test_val_0 = time_it( my_fn );\n   auto test_val_1 = time_it&lt; 100, 6 &gt;( my_fn );\n   auto test_val_2 = time_it&lt; 500 &gt;( my_fn );\n   auto test_val_3 = time_it&lt; 1000, 2 &gt;( my_fn );\n   auto test_val_4 = time_it&lt; 1000, 8 &gt;( [](){\n            using namespace std::chrono_literals;\n            std::this_thread::sleep_for( 5ms );\n         } );\n   auto test_val_5 = time_it&lt; 1000, 3 &gt;( []( int lt, int rt ){\n            return lt - rt;\n         }, 5, 7 );\n\n   // output results\n   std::cout &lt;&lt; \"exp 0: [ \" &lt;&lt; test_val_0[0] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_0[1] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_0[2] / 1000000.0 &lt;&lt; \" ]\\n\";\n   std::cout &lt;&lt; \"exp 1: [ \" &lt;&lt; test_val_1[0] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_1[1] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_1[2] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_1[3] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_1[4] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_1[5] / 1000000.0 &lt;&lt; \" ]\\n\";\n   std::cout &lt;&lt; \"exp 2: [ \" &lt;&lt; test_val_2[0] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_2[1] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_2[2] / 1000000.0 &lt;&lt; \" ]\\n\";\n   std::cout &lt;&lt; \"exp 3: [ \" &lt;&lt; test_val_3[0] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_3[1] / 1000000.0 &lt;&lt; \" ]\\n\";\n   std::cout &lt;&lt; \"exp 4: [ \" &lt;&lt; test_val_4[0] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[1] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[2] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[3] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[4] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[5] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[6] / 1000000.0\n             &lt;&lt; \", \" &lt;&lt;  test_val_4[7] / 1000000.0 &lt;&lt; \" ]\\n\";\n   std::cout &lt;&lt; \"exp 5: [ \" &lt;&lt; test_val_5[0]\n             &lt;&lt; \", \" &lt;&lt;  test_val_5[1]\n             &lt;&lt; \", \" &lt;&lt;  test_val_5[2] &lt;&lt; \" ]\\n\";\n   return 0;\n}\n\nand the output on my machine is:\nexp 0: [ 10.0203, 10.0184, 10.0266 ]\nexp 1: [ 10.0465, 10.0373, 10.0241, 10.0198, 10.0214, 10.0243 ]\nexp 2: [ 10.0152, 10.0176, 10.0305 ]\nexp 3: [ 10.02, 10.0174 ]\nexp 4: [ 5.01679, 5.01788, 5.01327, 5.01883, 5.02777, 5.02198, 5.01831, 5.01463 ]\nexp 5: [ 55, 55, 55 ]\n\nwhich, for the four first cases, is slightly more than 10ms and is what was expected.\nThe expected value for the experiment labeled&nbsp;4 is slightly higher than&nbsp;5&nbsp;ms and for the last lambda, it should be in the nanoseconds range, which it is.\nOf course, the constant value is suspicious and probably means the actual value is actually lower, but the time_it overhead and the clock precision is so that nothing below the 55ns value can be measured on my machine.\nI have not determined the error bar on the time measurement.\nThis is a complex subject and much more work would be needed to test for that.\nOne other thing I have not tried in this example is the timing of a member function, but it should work.\nWhat is impossible\nThere are things I have found are not possible with the function as it stands.\nOne of them is the inability to pass time_it a template function as an argument without specifying the template arguments of the passed in (or timed) function.\nI might be wrong, but I have not found a way to do that.\nExplicit argument passing is tedious and so time_it might not be very useful in those cases.\nOne other capability Python's timeit has that this one does not is the ability to accept setup code which is executed before the experiment is run.\nI am not sure how useful that would be in the context of C++.\nOf course, I can't imagine what others would use time_it for, so it might be useful even though I can't see it, but I am not writing the STL!\nIt's just that in my view, since C++ is compiled and not interpreted, time_it will still require a main function and an executable to run, unlike Python's timeit which can be run on the fly from the command line to test something out.\nTo my mind, the setup code can then be written in the main function to no real cost compared to having it done in the time_it function.\nThat being said, I believe it would be possible to accept a setup function by making the input of time_it two tuples of function and arguments, the first being the function to test and the second being the setup function.\nI am just not 100% certain that it would be useful and I cannot say for sure that it can be done because I have not tried implementing it.\nIn my opinion, it would make calling the function without setup code much uglier.\nMaybe an overload taking two tuples and the current version could live together and that would allow the functionality at \"no cost\".\nAnyhow, those are my thoughts on the matter for now.\nNotes\n[1]&nbsp;I chose the name with an underscore to differentiate the function from its Python counterpart since my version does not do exactly all the stuff the python version can!&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/cpp_time_it/","title":"Timing pieces of code"},"https://ghlecl.github.io/posts/friends_only_class/":{"body":"Friends only class\nHaving read a few blog posts and watched a short presentation on the subject of strong typedefs, I decided to look into their use and implementation.\nIn at least two implementations I have looked at (namely type_safe and opaque), I have found that mixin classes are used to add functionality to the new type.\nFor instance:\nclass my_strong_typedef : public addable, public divisible\n{};\n\nThose mixin were implemented as empty classes that only have friend functions in them.\nI was wondering what was the use of such constructs.\nTurns out, it is an application of the Bartonâ€“Nackman trick to allow argument dependent name lookup (ADL) to find the function.\nWhen the compiler sees the following expression:\nlt + rt\n\nit must lookup the operator+ function to use with the types of lt and rt.\nFrom my understanding, it is equivalent to an unqualified call to the operator, as in:\noperator+( lt, rt )\n\nThe various name lookup rules of C++, which are not so simple, are then used to find which function to call and an important aspect in this case is that during ADL:\n\nnamespace-scoped friend functions (and function templates) that are declared in an associated class are visible through ADL even if they are not visible through ordinary lookup\n\nwhich is a quote from the cppreference website.\nBecause of that part of the standard, an operator defined as a friend in a class of which your class inherits is found.\nWith this trick, you can, as other libraries have done, create multiple mixin classes from which your primary class inherits and ADL will find the functions.\nThe empty classes should mostly (if not completely) be optimized away by the compiler.\n","id":"https://ghlecl.github.io/posts/friends_only_class/","title":"Friends only class"},"https://ghlecl.github.io/posts/github_pages/":{"body":"GitHub Pages\nThis is one of my first posts.\nI have been toying with the idea of this blog for quite some time now.\nA flaw of mine: too much searching for the best solution, not enough implementing.\nI end up doing things too late.\nAnyhow, I digress.\nOne of the relevant questions when thinking of writing a blog is of course where to publish and what tool(s) to use.\nAt some point, I was thinking of hosting on an old computer of mine.\nPlayed with the different servers (compiled Apache, lighttpd and Nginx).\nThen, I realized all the time involved in maintaining my own server and changed my mind.\nI did not want to deal with the security updates and the log checking (or the program checking the logs...).\nNot that I am naÃ¯ve enough to think my content is worth hacking, but using my machine on a bot net or whatnot might be.\nAfter that, I started looking into shared hosting.\nThat could have worked, I even paid for a few months, but did nothing productive.\nWas still learning everything and for some reason (a friend of mine would say control issues, but who knows really !), I did not want to go with WordPress,\nJoomla or another content management system.\nThat seemed like overkill for my needs and yes, I like to control things on my computer a little too much for my own good and I did not feel I could get control over those behemoths in a reasonable timeframe.\nMost of the shared hosting I looked into (probably not exhaustive) seemed pre-configured for the CMS like systems, but not for other things and I found myself again trying to configure Apache on the shared host.\nI gave up for a while.\nI was busy with other things; but lately, I have been coming back to the idea of this blog.\nHence my looking into all those things again.\nThat's when a very good friend of mine suggested I look into GitHub Pages.\nThe idea is very interesting and if someone else is reading this, it means I actually went through with this.\nI personally have two basic needs for a server: 1) writing a blog (and maybe a private section as a journal) and 2) hosting private projects on Git.\nWith GitHub Pages, I can actually easily create the blog and if I pay for a GitHub account, I believe I should be able to do the private journal and the Git hosting as well.\nThe monthly cost will be roughly the same as a hosted plan and I will have almost zero if not zero administration to do.\nSo that's how I came to GitHub pages!  I am sure that since I am a novice at the Internet (well creating content other then on my Facebook account), there are some assumptions I have made that are wrong and my solution might be sub-optimal, but it works for me.\nNow, let's see if I can make a habit of writing.\n","id":"https://ghlecl.github.io/posts/github_pages/","title":"GitHub Pages"},"https://ghlecl.github.io/posts/integer_representations/":{"body":"Integer binary representations\nI had never had to look closely at integer binary representations in computers.\nThe mental model I had for them was not wrong, but it turns out it was sub-optimal and there are better ways to do things.\nIf you use high level abstractions and do not mainly work with fundamental types, or if you do not convert between integer types, you do not have to be mindful of the binary representation of integers all the time as you program.\nThus, before the last few weeks, I never had to look more closely at that, but I have started a project for which binary representation had a direct effect and I finally looked into them.\nI thought I would write down some notes and observations.\nI am pretty sure that this is probably covered in all computer science degrees and so might seem trivial and basic knowledge to many programmers, but since I don't have a CS degree and never had to think much about binary representation, this was informative to me!\nI should also point out that although I have used the C and C++ standards as references, the concepts here are not exclusive to these languages.\nUnsigned integers\nThe C standard is explicit in its definition of unsigned integers (at least up to C11, the latest standard at the time of writing).\nIt can be found in section&nbsp;6.2.6.2&nbsp;Integer types, paragraph&nbsp;1:\n\nFor unsigned integer types other than unsigned char, the bits of the object\nrepresentation shall be divided into two groups: value bits and padding bits\n(there need not be any of the latter). If there are N value bits, each bit\nshall represent a different power of 2 between 1 and 2Nâˆ’1, so that\nobjects of that type shall be capable of representing values from 0 to\n2N&nbsp;âˆ’&nbsp;1 using a pure binary representation; this shall\nbe known as the value representation. The values of any padding bits are\nunspecified.\n\nwhich is sometimes referred to as the pure binary representation.\nOther than the fact that the wording confused me at first1, this basically describes a usual binary positional number notation, which is much like the decimal positional number notation we commonly use but forget about.\nThis is rather intuitive if you are familiar with positional number systems.\nThe most significant bit position (i.e. the largest exponent bit) is not specified in the standard as it varies with hardware (and is more complicated then it seems if you get into byte ordering on top of that).\nThe range of the pure binary unsigned representation is the following:\n0 â€‚ to â€‚ 2n â€“ 1\n\nwhere n is the number of bits used in the representation.\nThat is how you get to the range&nbsp;0 to&nbsp;255 (= 28 â€“ 1) for an&nbsp;8&nbsp;bit number.\nOn the other hand, the C++ standard is more vague on the subject (at least up to C++17, the latest standard at the time of writing).\nAs far as I can tell, it does not impose an explicit representation for its unsigned type.\nSection 6.9 Types of the standard deals with type representations and the closest I have found to having an explicit representation specified for unsigned types is footnote 45 which says:\n\nThe intent is that the memory model of C++ is compatible with that of ISO/IEC 9899 Programming Language C.\n\nwhich would suggest, I think, that the type representations have to be compatible.\nBut that is not exactly explicit.\nThen, in paragraph 3, section 6.9.1&nbsp;Fundamental types, the standard says:\n\nThe range of non-negative values of a signed integer type is a subrange of the\ncorresponding unsigned integer type, the representation of the same value in\neach of the two types is the same, and the value representation of each\ncorresponding signed/unsigned type shall be the same. [...]  The signed and\nunsigned integer types shall satisfy the constraints given in the C standard,\nsection 5.2.4.2.1.\n\nThis does not imply a pure binary representation.\nThat said, most if not all C++ implementations in the field will actually have a pure binary representation for unsigned integers.\nSigned integers\nThere are a few signed integer representations and, for now at least2, none of them is explicitly specified (or forbidden) by the C or C++ standards.\nI have looked at three different representations, the last one being the most common if I understand correctly.\nSigned magnitude\nSigned magnitude is the obvious solution to the problem: take the first bit and make it a sign bit, i.e. model the + or â€“ sign as a 0 or a 1.\nThis is actually the mental model I had for signed integers.\nThe range of this solution is:\nâ€“(2(n â€“ 1) â€“ 1)  â€‚\nto â€‚ 2(n â€“ 1) â€“ 1\n\nwhere n is the number of bits in the representation.\nThis gives only one less number then the unsigned solution, because there are now two bit patterns that represent 0.\nFor instance, for 8 bits, both:\n00000000 â€ƒ and â€ƒ 10000000\n\nrepresent the number zero (albeit, positive 0 and negative 0).\nThis is not really a problem although comparison with zero now has to check for two cases.\nAlthough the signed magnitude approach seems very natural, it makes the hardware to do simple arithmetic operations&nbsp;(+, â€“) more complex to write.\nFrom what I read (I am no expert), this is mostly because the sign bit has to be dealt with before the operation and the circuitry becomes more complex.\nIt is mainly for this reason that other approaches have been developed.\nOne's complement\nIn the one's complement signed number representation, a negative number is obtained by taking the complement of its unsigned representation, i.e. inverting every bit.\nThe range of this binary representation is the same as that of the signed magnitude representation, for the exact same reason: there are two ways of representing the number 0.\nSo, again, the range is:\nâ€“(2(n â€“ 1) â€“ 1) â€‚ \nto â€‚ 2(n â€“ 1) â€“ 1\n\nwhere n is the number of bits in the representation and again, there are two representations of zero, albeit not the same as for signed magnitude (e.g. for&nbsp;8 bits):\n00000000 â€ƒ and â€ƒ 11111111\n\nThis binary representation makes algorithms for the addition and subtraction of integers much simpler than the signed magnitude representation.\nWith one's complement encoding, the usual algorithm that we do by hand for addition works and yields the correct value so long as the leftmost carry bit is added back to the result (if it is 0, that's fairly easy ;-) ).\nThere is a way to remove the need to add back the carry bit and that is one characteristic of the next representation discussed.\nTwo's complement\nTwo's complement is the last method discussed (although not the last one there is, see Wikipedia's article for at least two more).\nThis binary representation scheme is, today at least, the most prevalent signed integer representation in hardware.\nThis encoding is almost the same as one's complement, except that once you have calculated the inverted bits of the number, you add one to it.\nTwo's complement range is:\nâ€“(2(n â€“ 1)) â€‚\nto â€‚ 2(n â€“ 1) â€“ 1\n\nwhere n is the number of bits in the representation.\nIt should be noted that the range is not exactly the same as the one's complement: it is larger by one.\nThis is explained by the fact that in this encoding scheme, there is only one representation of&nbsp;0, and it is the same as the unsigned&nbsp;0, i.e. all bits set to&nbsp;0.\nOpposed to the one's complement representation, in this scheme, when all the bits are set to&nbsp;1, the value encoded is not&nbsp;0, but rather the smallest negative number (i.e.&nbsp;-1).\nFor&nbsp;8&nbsp;bits, the first row of the following table illustrates this:\n\n   \n      bits\n      two'scomplement\n      unsigned\n   \n   \n      11111111\n      -1\n      255\n   \n   \n      01111111\n      127\n      127\n   \n   \n      10000000\n      -128\n      128\n   \n   \n      10000001\n      -127\n      129\n   \n   \n      11010111\n      -41\n      215\n   \n   \n      11111110\n      -2\n      254\n   \n\nPractically, when you get to the largest signed (positive) integer you can represent with the number of bits available, if you increment by one, the bit pattern becomes that of the lowest signed (negative) integer you can represent (which is illustrated in the second and third rows of the table above).\nAfter that, increasing the bit pattern by&nbsp;1 will increase the value by one (fourth row of the table).\nCiting Wikipedia's entry on two's complement3:\n\nFundamentally, the system represents negative integers by counting backward and\nwrapping around.\n\nThis representation then has the interesting property that when going from unsigned to signed or vice-versa by only reinterpreting the bit pattern as if it were the destination type, the behavior is that of modulo 2n-1 wrapping (which is the same as the wrapping behavior mandated by the C standard for unsigned integers: wrapping to the value of the highest value plus one).\nAnother property of this encoding scheme, and probably a more significant advantage compared to the single representation of zero, is that the carry bit for the usual algorithm of arithmetic operations (additions, subtractions) must simply be ignored to give the correct result.\nThis differs from the one's complement encoding scheme, where it has to be added back.\nThus, arithmetic operations are even simpler to implement.\nThis is probably a big reason why two's complement is the dominating binary representation right now.\nFinal thoughts\nI never had to think much about the binary representation of the integers I used.\nI guess that can be attributed to me never working on the kind of applications where it matters or always working with a single architecture.\nGiven that I do not, for instance, often do binary file manipulation or networking, I am not sure I will personally use this knowledge very often, but in any case, it is good to know.\n\nNotes\n[1]&nbsp;The standard talks about the values represented and not the exponent, so that it talks about the series:\nâ€ƒâ€ƒ 1, 2, 4, 8, 16...\nof successive evaluations of the exponents of 2 rather than the successive exponents themselves, which actually start at zero.\nThis had confused me at first, but Patrice Roy and Aaron Ballman helped me see that I had misinterpreted the standard.\nThanks to both of them.&nbsp;â†©ï¸Ž\n[2]&nbsp;In the 2018 Jacksonville meeting of the ISO C++ Committee, a paper has been presented to officially make signed integers two's complement.\nThere is no certainty on the future of this paper, but the idea was also presented to the C standard committee and the discussions in both committee will take place to see if this is something they will pursue.&nbsp;â†©ï¸Ž\n[3]&nbsp;The sentence was taken from the linked page on April 28 2018.&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/integer_representations/","title":"Integer binary representations"},"https://ghlecl.github.io/posts/range_function/":{"body":"Exploring loops: Python's range in C++\nIn spite of what Sean Parent would like (i.e. no raw loops ;-) ), loops are a common control flow in programming.\nSo common that most languages have more than one loop syntax:\nfor loop,\nwhile loop,\ndo while loop...\nGiven their prevalence, loops might seem uninteresting, but when I decided to look into\ncreating a range function1 for C++ which would behave like Python's\nrange object, I learned a thing or two and decided to write them down.\nFor the impatient, the code I came up with is available on Github.  It was inspired by [Anthony William's post](https://www.justsoftwaresolutions.co.uk/cplusplus/\ngenerating_sequences.html) on the subject.\nI will put the same disclaimer here that Anthony put in his post:\n\n...hopefully people will find this instructive, if not useful.\n\nAs he points out, there are more complete alternatives (e.g. the Boost range library) with a probably higher quality of implementation (at the price of bringing the whole of Boost into your project if you do not already depend on it).2\nThis turned out to be quite a longer blog entry than I anticipated.  Consider yourself warned!\nIterating over containers\nOut of the C++11 (and beyond) features, range-based for loop is a favorite of mine.\nPrior to that being available, if you wanted to iterate over every element of a container, the alternatives were rather verbose.\nAmongst others, there is the C style for loop using the iterators that can be retrieved by the begin() and end() functions of the STL\ncontainers:\nstd::list&lt;double&gt; lst;  // ... fill list somehow ...\n\ntypedef std::list&lt;double&gt;::iterator lst_iter;\nfor( lst_iter beg = lst.begin(), end = lst.end(); beg != end; ++beg ) {\n   double cur = *beg;\n   // use cur (or use *beg directly everywhere)\n}\n\nor the for_each algorithm to which one provides a function object to apply to every element of the container:\nstd::list&lt;double&gt; lst;  // ... fill list somehow ...\n\nstruct my_op {\n   void operator()( double item ) {\n      // use item\n   }\n};\nstd::for_each( lst.begin(), lst.end(), my_op() );\n\nThose work, but they have a few drawbacks, amongst which you can find 1) being verbose and 2) not working with built-in arrays3.\nCompare that to other languages where the syntax for iterating over a container is more concise and more universally applied, like Python for instance:\na = [ 0, 1, 2, 3, 4 ]\nfor x in a:\n   #use x\n\nand you can see a difference, at a minimum in verbosity.\nWith range-based for loops, C++ closes the gap.\nThe syntax, introduced in C++11, is terser and works with both containers and built-in arrays (which is what I show in the example below).\nHere is what it looks like, which is much closer to the Python for loop:\nint ints[] = { 0, 1, 2, 3, 4 };\nfor( int x : ints ) {\n   // use x\n}\n\nOn top of the afore mentioned properties, and probably even more importantly, this construct is much more expressive: it clearly says that you want to use every element of the container.\nC++ being what it is, of course, the syntax gives you more control than in Python (at the expense of more complexity some would argue): you can specify if you want a copy of each object in the container, a reference to them, or a const reference to them.\nThus, all the following declarations (iterating over the same range as the previous example) would be valid:\nfor( int x : lst ) { /* body */ }        // copy\nfor( int&amp; x : lst ) { /* body */ }       // reference\nfor( int const&amp; x : lst ) { /* body */ } // const reference\n\nThat is to say that in C++, you can express that you want to iterate over all the items and whether you intend to modify them or not.\nOne condition to keep in mind is that in the constructs above, the loop variable type (int in the example above) must be initializable from the type in the container/array you want to iterate over.\nThis can lead to some errors:\nint ints[] = { 0, 1, 2, 3, 4 };\nfor( long x : ints ) {\n   // OK, a long can be initialized from an int\n}\nfor( long&amp; x : ints ) {\n   // Won't compile: long&amp; can't be \"initialized from\"/\"bind to\" an int\n}\n\nThat said, unless you really need to specify the type, it is usually recommended\nthat you use C++11's auto specifier to\nget type deduction on the loop variable.\nThat would look like this:\nint ints[] = { 0, 1, 2, 3, 4 };\nfor( auto x : ints ) {\n   // use x\n}\n\nwhich eschews the problems of type mismatch mentioned above.\nEven with this type deduction, the type decoration can be used so that all those syntaxes are\ncorrect and should (usually) have the expected behavior:\nfor( auto x : lst ) { /* body */ }        // copy\nfor( auto&amp; x : lst ) { /* body */ }       // reference\nfor( auto const&amp; x : lst ) { /* body */ } // const reference\n\nwhich can have the advantage that if you change the type in the container, you do\nnot have to change the type in the loop.\nThere are some more caveats, especially related to lifetime of temporary objects and accessibility, but the information here is enough in most cases.\nIf you want more information on type deduction in range-based for loops, see this article\nby Petr Zemek.\nOne limitation of the C++ syntax compared to Python's is that there is no way to limit the iteration to a sub-range of the container.\nFor this, you still need to use the previous constructs.\nC++11 made it easier to use these constructs with auto type deduction, but allowing iteration over a portion of the container is still missed, if you ask me, because if it were available, it would mean the same syntax could be used for any iteration over a container.\nIn future versions of the standard, ranges (which are a completely different concept from the function I am writing in what follows... naming things is hard) or view/span types might provide a better alternative, but for now nothing is provided in the standard to iterate over a subrange.\nIterating over indices\nContainers (unfortunately or not, depending who you ask), are not the only thing we need to loop over.\nIterating over indices can be necessary, and for that, Python has an easy way of creating a temporary \"container\" that will represent a range of integers.\nUsing this container, the same syntax that was used to iterate over lists can easily be applied to index iteration:\na = [ 0, 1, 2, 3, 4 ]\nfor x in a:\n   # use x\n\nfor x in range( 5 ):\n   # use x\n\nAs mentioned, the range object created using this syntax will generate the sequence of integers for the loop.\nThis object can be initialized with a single stop value (as shown), but can also be declared with a start/stop pair or a start/stop/step triplet.\nIt will go from start to stop (with stop being exclusive, i.e. the interval is[start, stop[) in steps of step.  The default value of start is zero and the default value of step is one, which is why you can use the  variations with a single parameter or a start/stop pair (which are not strictly speaking overloads, since Python does not allow that).\nThe parameter step can be negative.\nThe start value must be smaller than stop when step is positive and greater than stop when step is negative.\nrange( 10 )          // iterates from 0 to 9\nrange( 8, 32 )       // iterates from 8 to 31\nrange( 10, 5, -2 )   // iterates from 10 to 5 in steps of 2\nrange( 10, 5, 2 )    // does nothing\n\nIn C++, neither the language nor its standard library provides such a facility.\nThus, to iterate over numbers, one falls back to the C style for loop:\nint ints[] = { 0, 1, 2, 3, 4 };\nfor( auto x : ints ) {\n   // use x\n}\n\nfor( int x{0}; x &lt; 5; ++x ) {\n   // use x\n}\n\nThis is not actually so bad, but I like the consistency and expressiveness of Python's range object.\nIn the end, although those reasons might not be the strongest arguments, they still drove me to think about (over-engineer maybe ;-) ) a construct similar to Python's range in C++.\nAdmittedly, I was also simply a bit curious.\nSo, I set out to try and see if I could make a function or an object which could work with the range-based for loop much like Python's range object.\nThe initial \"design goals\"\nInitially, I really wanted the behavior of Python's range object.\nI did not want to have to specify the type to iterate over (i.e. short, int, long,\nunsigned...).\nI wanted to be able to go in both directions, i.e. increment or decrement the counter.\nI wanted to be able to specify the step size.\nBasically, I wanted to be able to write loops over indices like this:\nfor( auto idx : range( 6 ) ) { /* body */ }\nfor( auto idx : range( 2, 7 ) ) { /* body */ }\nfor( auto idx : range( 38, 13, -3 ) ) { /* body */ }\n\nI also wanted it to be as close to the raw C style loop efficiency as possible, or the same even.\nIf there were a large performance penalty, this would probably be a show stopper: C++'s \"zero-cost abstractions\" mantra.\nActually, I would argue that usually, in C++, even in non performance critical code, a cost in performance has to be greatly outweighed by a gain in expressiveness for a feature/proposal to even be considered, for better or worse.\nSo, with the following short list of goals:\n\nPython range behavior,\n\nstart / stop / step,\nincrement/decrement,\n\n\nno explicit type specification,\nno runtime overhead,\n\nI set out to build a function (or object) in C++.\nIn order to do that, I first had to understand the range-based for loop4.\nWriting the code\nUnderstanding range-based for\nAs defined by the C++17 standard in section&nbsp;9.5.4&nbsp;The range-based for statement ([stmt.ranged]), there are three main components to the range-based for construct:\n\na range declaration,\na range initializer,\na loop statement.\n\nAt its simplest, this is expressed like this:\nfor( for_range_declaration : for_range_initializer ) {\n   loop_statement\n}\n\nThe for_range_declaration serves to create the variable that will be used in the loop.\nThe for_range_initializer is what is executed to get the range (can be as simple as what I would call \"identity\", i.e. a range can directly be passed in).\nThe loop_statement is essentially the body of the for loop as with any C style for loop.\nThe code above will be used by the compiler to generate something similar to the regular iterator loop shown in the [first section]({{&lt; ref \"#iterating-over-containers\" &gt;}}).\nThe code looks like this5:\nauto&amp;&amp; rng = for_range_initializer;\nauto beg = begin( rng );\nauto end = end( rng );\nfor( ; beg != end; beg++ ) {\n   for_range_declaration = *beg;\n   loop_statement\n}\n\nwhere the begin and end functions are not necessarily free functions, and can be the equivalent member functions of most STL containers.\nActually, if either a begin or an end member function are found in the range object, the pair of member functions is preferred as specified in the standard.\nThis unfortunately means that if an unrelated function exists in the class, but has one of those names, the class cannot be used in the range-based for statement even if an appropriate free functions pair is provided. This is true regardless of the access specifier of the function (i.e. a private function with such a name will still prevent the range-based for, even if a valid, non member pair of begin/end functions exists).\nI believe this might be changed in the future, but for the C++11 to C++17 versions of the standard, range based for is defined this way.\nWith the definition above in mind, the requirements to use a range-based for loop can then be summarized as having two related types: first, a range like type that has both a begin and an end function (either member, or discoverable through ADL, i.e. in a related namespace) and second, an iterator like type which can be compared for inequality, incremented and dereferenced, i.e. implements the operator!=, operator++, and operator* functions.\nThe begin and end functions of the range like type must return objects of the iterator type.\nIf those criteria are met, then the range-based for loop construct is usable with the range like type.\nThe requirements can be summed up in code like this:\nstruct range_iterator {\n   range_iterator operator++();\n   bool operator!=( range_iterator const&amp; other );\n   range_value_type operator*();\n}\n\nstruct range {\n   range_iterator begin();\n   range_iterator end();\n}\n\nwhere range_value_type is the type of the data pointed to by the iterator and contained in the range to iterate over.\nImplementing those two types should be enough and so that is what I set out to do.\nThinking of a design\nI first looked at Anthony William's code to see how it could be done.\nI suggest you take a look at the code (download link) to see the approach he has taken.\nI wanted to try and make my own implementation, taking a different path.\nIn my first attempt, I ended up having to write multiple versions of some of the classes in order to customize the behavior for various types.\nFor instance, comparing floats with operator== is hardly ever what you want (because of floating point errors), but doing so works perfectly with integral types.\nEven with templates, I did not arrive at a customizable design that satisfied me.\nHaving to repeat myself was not so bad, but I wanted to see if I could avoid breaking the DRY principle.\nAs I said, a good dose of curiosity. :-)\nSo I needed to change the behavior depending on what type I iterate over.\nThere are a few alternatives to achieve such behavior in C++.\nI wanted an alternative that would be compile time based with no runtime overhead.\nI felt it was necessary to get the efficiency I was aiming for.\nThis meant and abstract base class with virtual functions was not in my solution set.\nI decided to explore solutions which allowed me to specify the behavior of the class: some kind of \"functionality injection\".\nAt first, I though of using std::function to hold the \"pointers\" to the functions to call.\nThat way, I could specify what to use for the three iterator operators when constructing them.\nThe downside of this, from my perspective, is that this will introduce type erasure (and\npossibly/usually accompanying heap allocations) and indirection, which, if I\nunderstand properly, is harder or impossible to optimize for the compiler.\nI was worried this would not give me the performance I wanted.\nIn thinking and searching for alternatives, I remembered this blog post on inheriting functionalities.\nThis made me think the same technique applied in the blog post CRTP might be the\nsolution I was looking for (did I mention over-engineering?).\nWriting some code\nEssentially, there are three functionalities that the iterator has to have and so I created three new types that the iterator would inherit from to \"consume\" the functionality.\nApplying the CRTP pattern, I parametrized those new types so that they would take the iterator class as a template parameter, and I made the iterator class derive from those types.\nThe implementation ended up as follows:\nenum class Direction : uint_fast8_t {\n   ascending,\n   descending\n};\nconstexpr auto Ascending = Direction::ascending;\nconstexpr auto Descending = Direction::descending;\n\ntemplate&lt; typename Iterator, typename Reference &gt;\nstruct Dereference\n{\n   auto operator*() -&gt; Reference {\n      return static_cast&lt;Iterator&amp;&gt;(*this).cur_val_;\n   }\n};\n\ntemplate&lt; typename Iterator &gt;\nstruct Increment\n{\n   auto operator++() -&gt; Iterator&amp; {\n      auto&amp; self = static_cast&lt;Iterator&amp;&gt;(*this);\n      ( self.direction_ == Ascending ) ? ++(self.cur_val_): --(self.cur_val_);\n      return static_cast&lt;Iterator&amp;&gt;(*this);\n   }\n};\n\ntemplate&lt; typename Iterator &gt;\nstruct EqualityComparisons\n{\n   bool operator==( Iterator const&amp; rhs ) const {\n      return static_cast&lt;Iterator const&amp;&gt;(*this).cur_val_ == rhs.cur_val_;\n   }\n   bool operator!=( Iterator const&amp; rhs ) const {\n      return !(*this == rhs);\n   }\n};\n\n\ntemplate&lt; typename T &gt;\nstruct range_iterator :\n      Dereference&lt; range_iterator&lt;T&gt;, T&amp; &gt;,\n      Increment&lt; range_iterator&lt;T&gt; &gt;,\n      EqualityComparisons&lt; range_iterator&lt;T&gt; &gt;\n{\n   using value_type = T;\n   using reference = T&amp;;\n   using iterator_category = std::input_iterator_tag;\n   using pointer = T*;\n   using difference_type = void;\n\n   range_iterator( T val, Direction dir ) :\n                  direction_{ dir }, cur_val_{ val } {\n   }\nprivate:\n   Direction direction_;\n   T cur_val_;\n\n   friend Dereference&lt; range_iterator&lt;T&gt;, T&amp; &gt;;\n   friend Increment&lt; range_iterator&lt;T&gt; &gt;;\n   friend EqualityComparisons&lt; range_iterator&lt;T&gt; &gt;;\n};\n\n\ntemplate&lt; typename Iterator &gt;\nstruct Range\n{\n   private:\n      using value_type = typename Iterator::value_type;\n   public:\n      Range( value_type start, value_type stop ) :\n         direction_{ (start &lt; stop) ? Ascending : Descending },\n                                          cur_val_{ start }, end_{ stop } {\n      }\n      auto begin() -&gt; Iterator {\n         return Iterator{ cur_val_, direction_ };\n      }\n      auto end() -&gt; Iterator {\n         return Iterator{ end_, direction_ };\n      }\n\n   private:\n      Direction direction_;\n      value_type cur_val_;\n      value_type end_;\n};\n\nA few things worth mentioning.\nI have had to make the \"operation\" classes friends of the iterator class to give them access to the iterator private data.\nIf I were designing something for the purpose of having client code specialize and extend the behavior, this break in encapsulation might be more of a concern and I might have to go for a different design, since the friend route seems to be the only viable alternative to give the base class access to the derived class data.\nBut for my current use, it is not something I am worried with.\nI also had to explicitly specify the reference type in the Dereference operation.\nThis is because at the instantiation time of the Dereference template in the inheritance list of the range_iterator, the latter is still an incomplete type and so its typedefs\ncannot be used.\nAlso, for brevity in this blog post, everything is in the global namespace, which is not at all good practice, but in the actual code, I put everything in a estd namespace (for __e__xtended std).\nThe indentation is also slightly modified for the purpose of the blog post.\nIn any case, with this code (and the appropriate #includes, again omitted for space), one can iterate over numbers using a range-based for loop like this:\nfor( auto idx : Range&lt; range_iterator&lt;int&gt; &gt;( 0, 8 ) ) {\n   // use idx\n}\n\nfor( auto idx : Range&lt; range_iterator&lt;int&gt; &gt;( 7, -1 ) ) {\n   // use idx\n}\n\nVerbose, shows implementation details, but a start.\nThis is the beginning of the interface I set out to have.\nIt allows specifying start and stop (but not the step yet).\nIt still requires an explicit type specification, which I would like to get rid of.\nIt will detect whether you want to go in the increasing of decreasing direction, so increment and decrement are covered.\nSome might argue the detection is undesired behavior (Python's range will not do this and a step of&nbsp;-1 must be explicitly specified to decrement).\nIt is debatable I guess, but this is the interface I went with.\nAs it stands, in the code above, the implementation will accept floating point\ntypes and character types.\nThis is not allowed by Python's range object (although using the Numpy linspace function, one can get a floating point range).\nUnfortunately, the current implementation of the comparison operator is defined in terms of the underlying type's operator==.\nAs previously mentioned, comparing floats using this operator is not ideal (and might actually never be true in some cases, which would create an infinite loop).\nThis has been one of the first reasons I have had for specializing in my earlier designs (which are not presented here), and so I will explore it soon, but before I get to that, I will look at performance to see if my design is good enough for me to pursue further.\nEvaluating the performance I\nInstead of benchmarking the code in the traditional sense of measuring execution time (which is complicated), I decided to look at the assembly generated in Code Explorer (i.e. I godbolted my code !) and see if there was any difference between this looping construct and a traditional C style for loop.\nMy hypothesis is that if the same assembly is generated, then the performance will be the same. I know that fewer instructions is not a guarantee of better performance, but I think it is safe to assume that if the assembly is the same, then the performance will be the same.\n\n    \n        \n    \n\nIn the above figure, the leftmost editor/compiler pane pair illustrates the C style for loop assembly.\nThe central pane shows the assembly for the version of the range code as it is in the previous section, and, because compiler explorer provides a version of the Boost libraries, the same loop using boost::irange is displayed in the rightmost pane.\nThe assembly generated is exactly the same even at a low optimization level (O1).\nThis means GCC is able to completely see through the abstractions and produce the same output whether this range construct or a hand coded C style for loop is used.\nWhen I saw that, I though it was excellent news, and decided to test with two other commonly used compliers: Clang and MSVC6.\nUsing Clang, I first got disappointing results: a higher optimization level (O2) was necessary to obtain the same result.\nThinking about why that was, I decided to test if it was related to inlining.\nRewriting the code to use __attribute__((always_inline)) to suggest more aggressive inlining to the compiler, I was able to get Clang to emit the same assembly as a hand written loop at the lower level (O1).\nGreat.\nI then tried with MSVC.\nNo matter the optimization level or the inlining hints used, for this compiler, there seems to remain a small difference in the assembly generated when using the Range code presented here compared to that generated when using the C style for loop.\nThis is shown in the following figure:\n\n    \n        \n    \n\n\nThe loops are structured differently.\nIn the assembly of the hand written loop, there is a single conditional jump instruction back to the beginning of the loop if the loop exit condition is not met, but no other jump instruction.\nWhen the exit condition is met, the program simply continues with the next instruction,\nthereby exiting the loop.\nOn the other hand, the assembly generated by the Range construct contains two jumps: one back to the beginning of the loop when the loop exit condition is not met, and one out of the loop when the condition is met.\nThe number of comparison instructions (cmp) is the same though and that should be the most significant performance factor.\nI imagine for a very short loop (i.e. low number of iterations), the extra jump could be a significant overhead, but for a long loop, I doubt it.\nI guess actual profiling would be needed.\nAnyhow, at least in that first attempt, performance did not seem to be a big issue (although compile times will go up if that is your metric).\nThis was encouraging to me and motivated me to keep exploring this design.\nDealing with the type specification\nThe next [design goal]({{&lt; ref \"#the-initial-design-goals\" &gt;}}) I will be talking about is the explicit type specification, or rather removing the need for it.\nThe Range object is a class template, and prior to C++17, there is no template parameter argument deduction for class templates.\nThis means using it directly as in the example above will not allow me to achieve\nthe \"no type specification\" goal that I set out for.\nHowever, function templates in C++ always did have template argument deduction and so\nthey could provide a nicer interface.\nGiven that the range expression in the range-based for loop does not need to be an object, but can be a function returning an object, it is possible to use a set of function template overloads instead of a Range directly.\nWith those, the types could be deduced.\nSuch an overload set can be written as follows:\ntemplate&lt; typename T &gt;\nauto range( T start, T stop ) -&gt; Range&lt; range_iterator&lt;T&gt; &gt; {\n   return Range&lt; range_iterator&lt;T&gt; &gt;{ start, stop };\n}\n\ntemplate&lt; typename T &gt;\nauto range( T stop ) -&gt; Range&lt; range_iterator&lt;T&gt; &gt; {\n   return range( T{0}, stop );\n}\n\nwhich can be used without a type specification like this:\nfor( auto i : range( 8 ) ) {\n   // use i\n}\n\nwhich is now very close to the Python version:\nfor x in range( 8 ):\n   # use i\n\nI have tested this on compiler explorer and it produces the same executable as\nthe previous version.  So far so good.\nCorrectly handling floating point ranges\nThis was not part of the initial [design goals]({{&lt; ref \"#the-initial-design-goals\" &gt;}}), but dealing with this issue actually helps with the last remaining design goal, so I dealt with it.\nIn the current version, the main problem with floating point ranges is the\ncomparison operator.\nAs it stands, the rest of the code would function properly, but the comparison of begin and end is broken, since it might never yield false and result in an infinite loop (which has happened in testing I should say!).\nSaid another way, begin might never compare equal to end with the current definition of comparison.\nChanging the definition of the operator== to the following unorthodox one would give the proper behavior for floating points:\nbool operator==( Iterator const&amp; rhs ) const {\n   return ( static_cast&lt;Iterator&amp;&gt;(*this).direction_ == Ascending ) ?\n            ( static_cast&lt;Iterator&amp;&gt;(*this).cur_val_ &gt;= rhs.cur_val_ ) :\n               ( static_cast&lt;Iterator&amp;&gt;(*this).cur_val_ &lt;= rhs.cur_val_ );\n}\n\nWith this definition, for an ascending direction, two iterators are considered equal if the value of the left hand side one is equal or larger than that of the right hand side one.\nIn the range-based for loop, the right hand side iterator in the comparison is always end(), so for those loops, the comparison as defined above means any iterator with a value of end or more (ascending) are considered equal.\nThus, as soon as the loop iterator's value reaches, or gets past, that of the end iterator, both iterators are considered equal and the loop stops.\nThis is the desired behavior for the loop, but it is an unusual definition for the iterator if you think of the iterator as the value it holds.\nHaving an operator with an unusual meaning is generally considered bad practice, and for good reasons.\nWith the previous definition, the result of comparing two iterators can depend on the order of the parameters:\nrange_iterator&lt;double&gt; a( 42.0, Ascending );\nrange_iterator&lt;double&gt; b( 48.5, Ascending );\nassert( a == b );                    // will fire,     42.0 &gt;= 48.5 -&gt; false\nassert( b == a );                    // will not fire, 48.5 &gt;= 42.0 -&gt; true\nassert( ( a == b ) != ( b == a )  ); // will not fire, false != true\n\nwhich is surprising.\nOperators having unusual or inconsistent behavior can be confusing (the C++ Core Guidelines discuss this in their overload section (C.over), more specifically subsections C.160 and C.167).\nThe problem I am faced with here is that the range-based for loop cannot be customized to use something other than operator!= to compare the two iterators.  So whatever behavior I want my iterator to have, it must be in the comparison operator.\nThat said, for the case at hand, these iterators are part of the implementation of the range function, which is the only part of the library that is considered public.\nThe only use of the comparison operator should therefore be the one in the range-based for, where the only comparison is between the begin and end iterator pair, which will have the correct behavior.\nThe iterators are not meant to be used directly and I think the implementation is thus reasonable.\nThat is debatable for sure, but in any case, in the actual implementation, the function above is defined in the EqualityComparisons class and some template metaprogramming ensures that it applies only to floating point types.\nI should warn though that using floating points as a loop counter, either manually or using the range functions here, is not as simple as it seems at first: floating point maths and comparisons are hard and floating point error will be present with the naive loop.\nSince the construct proposed here aims only at replacing the naive loop, nothing fancy is done to compensate floating point errors in loops involving floating points, and so I thought a reminder was in order.\nAllowing non unit steps\nThe last goal in my initial list is the non unit step.\nFor now, I can select start and stop, I allow increment and decrement, I do not need to specify the type, and the performance penalty (with some optimizations enabled) is almost null on the compilers I tested.\nThe final goal is to allow non unit steps.\nIn order to do that, I have to:\n\nstore the step in the iterator;\nadjust the operator++ to advance of step units instead of 1;\nadjust the operator== for integral types;\nadd an overload to the range function which takes 3 arguments.\n\nThe third item was the easiest to deal with.\nThe change became necessary, since if the step size is not an exact divisor of the distance between start and stop, the original definition of operator== will never stop the loop, because the loop iterator value will never be exactly the end iterator value, even for integral types.\nIt turns out that using the same definition of the equality operator as was used to deal with floating point iterators, the problem is solved.\nNow, when the value of the loop iterator is above the end iterator value, the loop stops, as desired.\nGoing back to the first item, the decision I made was to add a template parameter to the range_iterator class which will be of a new enum type Length which tells me whether the range_iterator will have unit length steps or any other length.\nThen, I create a specialization for the case where the length is unit and one for when the length is other.\nenum class Length : uint_fast8_t {\n   unit,\n   other\n};\n\nconstexpr auto Unit = Length::unit;\nconstexpr auto Other = Length::other;\n\ntemplate&lt; typename T, Length length &gt;\nstruct range_iterator;\n\ntemplate&lt; typename T &gt;\nstruct range_iterator&lt; T, Unit &gt; :\n         Dereference&lt; range_iterator&lt;T&gt;, T&amp; &gt;,\n         Increment&lt; range_iterator&lt;T&gt; &gt;,\n         EqualityComparisons&lt; range_iterator&lt;T&gt; &gt;\n{\n   /* implementation here for Unit length */\nprivate:\n   Direction direction_;\n   T cur_val_;\n}\n\n\ntemplate&lt; typename T &gt;\nstruct range_iterator&lt; T, Other &gt; :\n         Dereference&lt; range_iterator&lt;T&gt;, T&amp; &gt;,\n         Increment&lt; range_iterator&lt;T&gt; &gt;,\n         EqualityComparisons&lt; range_iterator&lt;T&gt; &gt;\n{\n   /* implementation here for Other length */\nprivate:\n   Direction direction_;\n   T cur_val_;\n   T step_;\n}\n\n\nIn the case where the length is not one, the step is kept as a data member and available to the operators.\nChanging the operator++ was not much more complicated than the change to the comparison operator.\nThe Increment type is now templated on the length, and, using SFINAE, a different implementation of the operator++ is used depending on whether the length argument is Unit or Other.\nauto operator++() -&gt; Iterator&lt; T, length &gt; {\n   static_cast&lt;Iterator&lt; T, length &gt;&amp;&gt;(*this).cur_val_ +=\n                           static_cast&lt;Iterator&lt; T, length &gt;&amp;&gt;(*this).step_;\n}\n\nThe only remaining task is to add an overload of the range function.\nThis overload will take one more parameter (the step) and return a range parametrized\nwith a different iterator type.\ntemplate&lt; typename T, typename U &gt;\nauto range( T start, T stop, U step ) -&gt; detail::range&lt; T &gt; {\n   return detail::range&lt; T &gt;{ start, stop, step };\n}\n\nIt should be noted that the start/stop and the step parameters can have different types.\nThis is necessary for someone to be able to call the function like this:\nfor( auto i : range( 13u, 0u, -3 ) ) {}\n\nIf all three parameters were of the same type, then the user would have to manually convert one way or the other, which is not a nice interface.\nWhat is done in the implementation is a cast inside the constructor of the Range object to the iterator type.\nUnfortunately, this opens the door to quite a few conversion problems.\nIf you go from signed to unsigned, the behavior is correct and portable.\nIf you go from unsigned to signed, the behavior is implementation defined, but should mostly work.\nAnyhow, with all of this in place, all my goals are achieved!\nMixed types, logic checking...\nAs I said, the code above is close to the one I ended up with, but not exactly the same.\nYou can go on Github to find my range function implementation.\nThere are more things one could do with it (or do differently).\nOne thing that could be done is allow for mixed types to be used for specifying the bounds and not only the step (see previous section).\nThat is actually what prompted my two previous posts about [integer representations]({{&lt; ref \"integer_representations\" &gt;}}) and [usual conversions in arithmetic]({{&lt; ref \"usual_conversions\" &gt;}}).\nI am not illustrating the code here, since it would make this already long post even longer, but it can be done.\nIt does bring up some interesting questions though such as which type to return when two types are used.\nI am still uncertain what a good answer is.\nAs far as I can tell, Boost range has decided to simply not allow that.\nThis is not unreasonable.\nThat said, the use case I see for\nallowing mixed types bounds specification is the following:\nstd::vector&lt; int &gt; v{ 0, 2, 4, 6, 8, 10, 12 };\nfor( auto idx : range( 3, v.size() ) ) {\n   // do something with the items 3 to size of vector v\n}\n\nSince the standard library has made the choice of having size of containers be unsigned, without mixed bound types, this would not work without asking the user to write 3u as the first index or cast the .size() call result.\nAnother thing, you will see in the code is some consistency checks.\nFor instance, if start &gt; stop while step &gt; 0, there is likely a problem (unless you\nallow overflowing loops, which could be done).\nThere are some parts of the code which, with hindsight, seem superfluous.\nFor instance, there is no difference in the dereferencing behavior in any of the code here, so it would be simpler to leave it in the range_iterator implementation.\nIt would not be DRY (repeated in two classes), but the complexity introduced might not be worth it.  As with any code, I think it can be bikeshedded debated forever.&nbsp;&nbsp;:-)\nAnyhow, I hope you have enjoyed reading this post.\nWriting it certainly made me clarify the concepts involved in range-based for loops in C++ and yielded a construct I can use to loop over indices with a nice pythonish syntax.\nIt is what I initially wanted, so for me at least, mission accomplished!\n\nAcknowledments\nI would like to thank Gabriel Aubut-Lussier for taking the time to read this post before I published it and making constructive comments on the content.\nThe writing is better for it.\nNotes\n[1]&nbsp;The work here will probably be made completely useless by the range proposal when it gets in the standard.\nOn top of that, such a function already exists in Boost.\nThe links were valid at the time of writing.\nThe link to the range proposal is actually to a draft version of the proposal, which might differ from what actually ends up in the standard.&nbsp;â†©ï¸Ž\n[2]&nbsp;Link pointed to most recent release on the date of writing.\nMight not work on future dates.&nbsp;â†©ï¸Ž\n[3]&nbsp;Edit 2018-08-16: Turns out even in C++98, it works for built-in\narrays, albeit not with the std::begin() and std::end() free functions given\nthey were introduced in C++11.\nYou can simply pass the array \"bounds\" (i.e. the array variable and the array variable plus the length) to the standard algorithm (tested with std::sort) and it works.\nYou learn every day!&nbsp;â†©ï¸Ž\n[4]&nbsp;At first, like most I would think, I actually first asked a search engine and that is how I found Anthony's post on the subject.\nThis was a great starting point.&nbsp;â†©ï¸Ž\n[5]&nbsp;Adapted from the C++17 standard draft.&nbsp;â†©ï¸Ž\n[6]&nbsp;In the course of writing this article, I realized that a version of the Intel compiler was also available on Compiler Explorer and thus decided to look at the assembly generated with this compiler.\nIt turns out it takes optimization level 3 for the code to give the same result as the hand-coded loop with this compiler.\nDepending on whether or not you can use this optimization level, the performance of the Range presented here might not be very good with this compiler.&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/range_function/","title":"Python's range in C++"},"https://ghlecl.github.io/posts/return_type_overload/":{"body":"No return type overloading\nIn C++, return type does not participate in function overload resolution, i.e. it is not possible to overload a function on the return type.\nThus, this is not legal C++:\nvoid to_lower( std::string&amp; strg );\nstd::string to_lower( std::string&amp; strg );\n\nThe compiler will issue an error when it sees the second declaration.1\nFor instance, the error Clang emits is the following: \"error: functions that differ only in their return type cannot be overloaded\".\nThe detailed reasons for this rule are irrelevant in the current discussion: it is just a fact.\nI believe it is partially due to C++ allowing you to ignore the return value of a function if you so choose.\nThus, even for a function returning an int, you can call it without using or even capturing the return value:\nint fn( int );\n\nauto ret_val = fn( 5 );\nfn( 12 ); // legal call, simply drops the return value\n\nIn the example, if fn were overloaded on return type only, how would the second call be disambiguated?\nI am far from certain this is the only reason why, but it is convincing enough for me.\nStill, I really wanted to be able to have an \"in place\" and \"not in place\" version of the to_lower function I wrote.\nAnd, naming things is hard, so I did not want to have to change the name of the function.\nCheating a little bit, I have found a way to simulate function overloading on return type or at least make it possible to have the same name for the two functions and (almost) only a differing return type.\nWith what I came up with, one of the two overloads becomes a template and must be called explicitly, so no ADL or overload resolution alone can help me and template argument deduction cannot be used either because the function parameter(s) do not depend on the template parameter.\nAfter all, it is illegal to overload on return type in C++ and my technique does not imply changing the ISO C++ standard!\nHow I cheated\nAll I did is use a template parameter as a tag for one version of the function.\nI created an empty struct as a tag and templated one of the versions (the one the tag corresponds to).\nThen, when I want that version to be called, I explicitly select the templated version passing the tag as an explicitly specified template argument.\nHere is a code sample to illustrate/explain better:\n#include &lt;type_traits&gt;\n#include &lt;string&gt;\n#include &lt;cstdio&gt;\nnamespace ns\n{\nstruct in_place {};\n\ntemplate&lt; typename Tag &gt;\nvoid to_lower( std::string&amp; strg )\n{\n   static_assert( std::is_same&lt; Tag, in_place &gt;::value,\n                     \"only in_place is allowed as the template parameter\" );\n   //... implementation here ...\n}\n\nstd::string to_lower( std::string&amp; strg )\n{\n   //... implementation here ...\n   return strg;\n}\n\n} // namespace ns\n\nint main( int argc, char* argv[] )\n{\n   using ns::in_place;\n   using ns::to_lower;\n\n   std::string to_change( \"This STring is Mixed CASe.\" );\n\n   auto new_strg = to_lower( to_change );\n   to_lower&lt; in_place &gt;( to_change );\n\n   printf( \"%s\\n\", ( to_change == new_strg ? \"true\" : \"false\" ) );\n   return 0;\n}\n\nUsers of the function are provided with the tag and can use it to call the \"overload\" (so to speak, not an actual overload, I know).\nCompilers are actually pretty good at eliminating empty classes from the code, even at not too high optimization levels.\nSo I am confident that the tag should disappear completely from the resulting binary and there should be no runtime downside to this technique.2\nAlso, if appropriate, one function can be implemented using the other.\nTo ensure that types other than the provided tag can't be used for the function call, I put a static_assert in the implementation.\nOtherwise, any type could be put in there (as in to_lower&lt;int&gt;), which although it would work, would not be as explicit and as clear.\nI don't know why anyone would want do that, but I forbid it explicitly in my implementation.\nWhat I did is no revolution and nothing fancy, but it does allow me to get the interface I need from my function, namely two functions with the same name differing only in return types... or almost.\nI also find it to be expressive: it is clear at the call site that I will be modifying the string that is passed in.\nSome might like it, others won't!\nIf you find it useful, good.\nAlternative\nA friend suggested that another possible implementation would be to use variadic templates and call the function with an empty diamond.\nI tried that version and it is possible.\nI even put in a static_assert to check that the function can't be called with a non empty parameter pack.\nThat being said, I find that it is better to have the empty struct as a tag because it is a bit more explicit which overload actually acts in place (whereas in the empty parameter pack alternative, it is clear which overload is called (the template), but not whether this is the\none working in place).\nI suspect either implementation would result in the same binary code.\nTo me, another argument in favor of keeping the tag is that tag dispatching (which my technique is similar to) is familiar to many C++ programmers while seeing a call with the empty diamond is not so common (I think, I might be completely wrong).\nNotes\n[1]&nbsp;I know that the second overload, the one returning a new string, could take it's parameter by reference or by value (since I'm probably doing a copy in the implementation anyhow).\nThat would have complicated the explanation of the overloads (as in that case, both functions would not technically be exactly differing only in return type), so I chose to write my examples that way in the post.&nbsp;â†©ï¸Ž\n[2]&nbsp;I would have \"Godbolted\" my code, but I am not that good at reading assembler and when I tried with the std::string, the resulting assembler contains much more than my function and is not that simple to analyse.\nI did it with ints, but then, starting at -O2, main becomes almost empty as the compiler can see all the constants and simplify all the way.&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/return_type_overload/","title":"Return type overloading"},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"body":"move, rvalues, forward and C++\nEver since I heard about it, the concept of move semantics has been intriguing and appealing to me.\nI confess to liking new C++ things and micro-optimizations way too much... but still, the concept of \"moving\" memory instead of copying it in order to gain efficiency is at least worth exploring, right?\nAnyhow, I chose a function of mine and decided to try and make it handle move semantics properly.\nThe function I chose is one that I use often enough that I thought it would make a difference.\nIt is the following template1:\ntemplate&lt; typename T &gt;\nstd::string to_string( T const&amp; to_convert )\n{\n   std::stringstream strm( \"\" );\n   strm &lt;&lt; to_convert;\n   return strm.str();\n}\n\nNow, it turns out that because it is a templated function, move semantics will have to be mixed with forwarding references and that, if you ask me, those things are gibberish if you don't understand lvalues and rvalues.\nThis is what started my adventures into rvalue land.\nAfter going through the process, I now realize that for this particular case, it is not really useful because as far as I can tell, std::strinstream::operator&lt;&lt; is not overloaded on rvalue references.\nStill, the exercise was enlightening and I now know (or at least think I know) a lot more about rvalues.\nThe information here is nothing new, probably incomplete and also probably full of inaccuracies when compared to the strict standard C++ language definitions (after all, this is in my own words), but I have found the information useful.\nI guess this is a snapshot of my current understanding.\nAll the better if it helps anybody else.\nNow, on to my journey.\nA new kind of references: &amp;&amp;\nThe idea behind move semantics is that when you need the value a variable contains and it is a temporary (or simply about to get out of scope), you could make the memory it owns yours instead of copying the value in your own memory.\nThis should execute faster then the copying as it is doing less work.\nOf course, saving copies will not make much difference is you are copying a single int, but if you are, for instance, copying a std::vector of an image class, stealing the pointer to the images instead of copying the memory should have a large impact on runtime efficiency.\nFor this to be possible, there has to be a mechanism to detect the temporary nature of a variable and select what to do when a variable is temporary and when a variable is not.\nStarting with the 2011 standard, C++ now defines rvalue references, identified by a double ampersand symbol (&amp;&amp;), which will only bind to temporary values.\nThis gives us a way to determine if a parameter is a temporary value: create an overload (or a single function) which takes an rvalue reference as its input.\nSince this reference parameter will only bind to a temporary value, one can assume that the parameter cannot normally be used elsewhere in the program once the function returns.\nWhen this guarantee holds, one can safely steal (or move) the internals of the parameter(s) instead of making a copy(ies), potentially making the function more efficient.\nThis is the crux of move semantics.\nOf course, the devil is in the details, as I have found out.\nQuick digression: value categories\nLvalues and rvalues are value categories.\nThose two categories have been part of C++ since its first standardization in 1998 and were carried over from C (although in C, no rvalues were directly defined and \"not lvalue\" was deemed sufficient2.\nThose two categories take their name from their original, although now erroneous, definition, which was to think of them as the \"left\" and \"right\" operands of an assignment:\nint a = 7; // a is an lvalue and 7 is an rvalue\n\nWith that definition, \"assignability\" appears as the main difference between lvalues and rvalues: if something cannot be assigned to, it is an rvalue.\nI honestly do not know if it is the case in C, but I know that is not the case in C++.\nHere is an example of an lvalue that is not assignable in C++.\nconst int b{ 8 }; // b is an lvalue\nb = 9; // error, can't assign to const even though it is an lvalue\n\nThe const variable is still an lvalue, but one cannot assign a new value to it after construction.\nSo although it is not assignable, it is an lvalue.\nIt is my understanding that the more interesting property is not \"assignability\", but rather \"addressability\", i.e. the capacity to refer to a value.\nI can take the address of both variables defined in the previous examples and refer to it, but\nI cannot take the address of the literals and refer to them later in the program.\nint a;\nint&amp; c = &amp;a; // valid\nint&amp; d = &amp;8; // invalid, can't refer to (or take address of) the literal 8\n\nSo a better rule for rvalues is the following: if I can take the address of a value or expression and reference it later in the program, the value is an lvalue; otherwise, it is an rvalue.\nThis is not the complete picture of value categories, since five value categories are now defined in C++ (lvalues, glvalues, rvalues, prvalues and xvalues), but it turns out to be an adequate rule of thumb for lvalue/rvalue discrimination and that is what matters most for move semantics.\nIn this blog post on isocpp.org, Scott Meyers gives this heuristics to determine the general type (lvalue vs rvalue) of an expression or variable:\n\nIf you can take the address of an expression, the expression is an lvalue.\nIf the type of an expression is an lvalue reference (e.g., T&amp; or const T&amp;, etc.), that expression is an lvalue.\nOtherwise, the expression is an rvalue.\n\nwhich is a quote from the linked blog post.\nAgain, in Scott's words:\n\nConceptually (and typically also in fact), rvalues correspond to temporary objects, such as those returned from functions or created through implicit type conversions.\nMost literal values (e.g., 10 and 5.3) are also rvalues.\n\nI think a nice feature of this heuristic is that it helps you remember that the type of an expression is independent of whether the expression is an lvalue or an rvalue. That is, given a type T, you can have lvalues of type T as well as rvalues of type T.\nItâ€™s especially important to remember this when dealing with a [function] parameter of rvalue reference type, because the parameter itself is an lvalue.\nThat last sentence took me a while to fully understand.\nIt is illustrated by the following example (where the new double ampersand symbol (&amp;&amp;) for rvalue references is used):\nvoid foo( MyType&amp;&amp; param )\n{\n   auto&amp; alias = &amp;param;  // Completely legal: param has a memory location\n                          // inside the function body.\n   Thus, by the heuristic\n                          // above, param is an lvalue.\n}\n\nThis fact that the parameter is an lvalue inside the function might seem like a simple detail, but it will turn out to be necessary to explain why std::move and std::forward are necessary later on.\nOverloading on rvalue reference\nSo the idea, as mentioned, is to create an overload on rvalue references.\nThere is no way of representing rvalues (almost by definition from a certain point of view), so rvalue references are the only option.\nThe following is a simple example.\n#include &lt;iostream&gt;\n\nint bar()\n{ return 9; }\n\n// const lvalue reference overload\nvoid foo( int const&amp; param )\n{ std::cout &lt;&lt; \"foo( int const&amp; param )\" &lt;&lt; std::endl; }\n\n// rvalue reference overload\nvoid foo( int&amp;&amp; param )\n{ std::cout &lt;&lt; \"foo( int&amp;&amp; param )\" &lt;&lt; std::endl; }\n\n// by copy overload, do not define as it will yield\n//       error: call to 'foo' is ambiguous\n// void foo( int param )\n// { std::cout &lt;&lt; \"foo( int param )\" &lt;&lt; std::endl; }\n\nint main( int argc, char* argv[] )\n{\n   int a{ 6 };\n   int&amp; b{ a };\n   const int&amp; c{ b };\n   foo( a );     // calls first foo\n   foo( b );     // calls first foo\n   foo( c );     // calls first foo\n   foo( 7 );     // calls second foo\n   foo( bar() ); // calls second foo\n}\n\nIn this case, this does not buy you much, but the snippet above is compilable by any C++11 conformant compiler.\nThis little code should output foo( int const&amp; param ) three times and foo( int&amp;&amp; param ) twice.\nA non compilable but more realistic/useful example would be:\nstd::vector&lt;int&gt; foo();\n\n// two functions constructing a MyCoolClass object from a vector&lt;int&gt;\nMyCoolClass make_from_std_vec( std::vector&lt;int&gt; const&amp; vec ); /* overload 1 */\nMyCoolClass make_from_std_vec( std::vector&lt;int&gt;&amp;&amp; vec );      /* overload 2 */\n\nstd::vector&lt;int&gt; the_vec;\n/* fill the_vec */\n\nauto obj_1 = make_from_std_vec( the_vec );  // binds to overload 1\nauto obj_2 = make_from_std_vec( foo() );    // binds to overload 2\n\nHere, because std::vector has been updated to allow move semantics, the second overload will be able to move the memory instead of copying it into the MyCoolClass object which should save a copy.\nImplementing : enters std::move\nOnce you have an overload which selects the rvalues, you have to implement it.\nMost (if not all) POD types and STL types have been updated for move semantics, although I am not sure that moving is faster than copying in the case of int, for instance.\nThat being said, this means that move constructors and move assignment operators are available for std::vector.\nIf you pass an rvalue to those, they will move.\nBut that brings us back to the discussion on function parameters inside of the function being lvalues.\nThat means that the following will not actually move anything and will instead make a copy:\nstd::vector&lt;int&gt; steal_guts_and_do_stuff( std::vector&lt;int&gt;&amp;&amp; vec )\n{\n   std::vector&lt;int&gt; result( vec );   // INCORRECT, will not move\n   /* do stuff */\n   return result;\n}\n\nThat is because even though there is an overload of the std::vector constructor for rvalues, what you actually passed as a parameter (vec) is not an rvalue (that was explained in previous sections).\nThus, the compiler will select the copy constructor instead of the move constructor.\nThat being said, because you are implementing the rvalue reference overload of your function (in this case, the steal_guts_and_do_stuff function), you know that in the caller scope, the parameter is actually an rvalue.\nThis means if you had a way to cast the parameter to an rvalue inside the function implementation to tell the compiler to select the move constructor for std::vector, then that one would be selected.\nThis can be done with the new function std::move.\nAll this function does is unconditionally cast its input to an rvalue reference.\nThe casting is done via the reference collapsing rules.\nThus, the implementation above should actually be written as:\nstd::vector&lt;int&gt; steal_guts_and_do_stuff( std::vector&lt;int&gt;&amp;&amp; vec )\n{\n   std::vector&lt;int&gt; result( std::move( vec ) );\n   /* do stuff */\n   return result;\n}\n\nwhere you can see that std::move has been used on vec.\nThat is pretty much it.\nJust insure that in your rvalue overload implementations, you use std::move on all the parameters that you want to move from and that you do not reuse those parameters after they have been moved from.\nIf you want your user defined types to be \"movable from\", then define a move constructor and a move assignment operator and then a user will be able to move from your types.\nAnd notice that you do not use std::move on the return statement.\nMoving is done when you use the input parameter to cast it to an rvalue forcing the compiler to take the rvalue overload of the function you are calling (in my case, move constructor).\nYou do not want to move the return.\nAnd then they were three: T&amp;&amp;\nAs I have previously mentioned, the function that I wanted to convert to move semantics was a template.\nThere is a catch in this case.\nActually, this function declaration:\ntemplate&lt; typename T &gt;\nvoid foo( T&amp;&amp; param );\n\ndoes not declare an rvalue reference overload.\nThe reference here is a forwarding reference3.\nReferencing once again Scott Meyer's blog post on isocpp.org, one finds this rule of thumb to determine the if an expression is a forwarding reference:\n\nIf a variable or parameter is declared to have type T&amp;&amp; for some deduced type T, that variable or parameter is a universal reference.\n\nDeduced type mostly means templates and auto (which I won't talk about anymore).\nWhat is particular about forwarding references is that they can bind to both lvalues and rvalues, depending on what type (not value) it is initialized with.\nIn fact, they will bind to lvalues, rvalues, const, non-const, volatile, non-volatile...\nThis makes them really greedy and has some interesting consequences on the overload set, but that's not the subject here.\nSo now, three types of references have been mentioned: lvalue references, rvalue references and forwarding references.\nWhen implementing a function overload for one of the reference type, inside the function body, one must make sure to understand what should happen.\nFor an lvalue reference overload, the parameter is an lvalue and should never be moved from.\nFor an rvalue reference overload, the parameter is always an rvalue, thus temporary, and can always be moved from.\nFor a forwarding reference, the parameter can be either an lvalue or an rvalue and should be moved from in the latter case, but not the former.\nThe need to cast in the function body has been previously explained.\nI also mentioned that the tool to cast unconditionally to an rvalue reference is std::move.\nFor forwarding references, the tool to conditionally cast to rvalue references is std::forward.\nThis standard library template will cast an lvalue reference (or something that binds to an lvalue reference) to an lvalue reference and an rvalue reference (or something that binds to an rvalue reference) to an rvalue reference.\nThe mechanism used for this is reference collapsing and the result is exactly what we need to implement the forwarding reference overload.\nThe following code snippet illustrates what usually should be done:\nMyClass from_vec( std::vector const&amp; vec )\n{\n   return MyClass{ vec };\n}\n\nMyClass from_vec( std::vector&amp;&amp; vec )\n{\n   return MyClass{ std::move( vec ) };\n}\n\ntemplate&lt; typename C &gt;\nMyClass from_container( C&amp;&amp; container )\n{\n   return MyClass{ std::forward&lt; C &gt;( vec ) };\n}\n\nIt should be noted that for std::forward, template argument deduction would not produce\nthe desired results, so the type has to be repeated in the call to the function.\nThe result\nSo, now, I have everything I need to write my function.\nIt is a template, so it will use the forwarding references.\nThis is my new implementation:\ntemplate&lt; typename T &gt;\nstd::string to_string( T&amp;&amp; to_convert )\n{\n   std::stringstream strm( \"\" );\n   strm &lt;&lt; std::forward&lt;T&gt;( to_convert );\n   return strm.str();\n}\n\nIf (and as I pointed out in the intro, it is not the case) the stringstream redirect operator (&lt;&lt;) has an rvalue overload which steals the internals of it's argument, it will do so for the cases where to_string is called with an rvalue and it will use the regular lvalue reference overload when called with an lvalue.\nThis is the \"optimal\" or near optimal behavior for my function.\nTo get to my implementation, I had first simply stuck a &amp;&amp; symbol to my reference (removing the const, of course) and used std::move.\nIt failed for reasons that are now apparent from the discussion in the previous sections.\nAfter that, I started to read all of the references I link in these notes (and more) and realized I needed to use std::forward.\nI finally realized that for my function, this is useless, but the journey was worth it!\nNotes\n[1]&nbsp;Yes, I am sure someone else would do a better job at writing it more generic, faster, better, etc.; not the point!&nbsp;â†©ï¸Ž\n[2]&nbsp;The C language itself borrowed the concepts from CPL (see this blog post by Danny Kalev).&nbsp;â†©ï¸Ž\n[3]&nbsp;Scott Meyers used the terminology Universal References both in his articles and his book Effective Modern C++, but after discussion with members of the ISO C++ committee and the C++ community, he agreed to include a footnote (in Item 24) to say that since they should almost always be used with std::forward, the name forwarding references is gaining traction.&nbsp;â†©ï¸Ž\n[4]&nbsp;Unreferenced in the text: ambiguous call\n","id":"https://ghlecl.github.io/posts/rvalue_references_in_cxx/","title":"rvalue references in C++"},"https://ghlecl.github.io/posts/static_site/":{"body":"Hugo\nIn a previous entry, I described how I got to using GitHub Pages.\nThat was one of the (if not the) first question I had to figure out when I decided to write my notes in an Internet format (ok, blog, but I don't see myself as a blogger).\nThe second thing I had to figure out was what to use as a writing tool.\nI could simply write static HTML by hand and leave it at that (actually, if you stumbled upon this website before I posted my first few posts, I left a Hello World page up for a few weeks/months while figuring all this out!).\nI am trying to set the bar a little higher than that for myself.\nFor work, I have been playing with Django and at some point, I thought I could write something in Django or use a Django CMS, but since GitHub Pages only serve static content, I had to abandon that plan.\nI could have done static HTML with some CSS framework like Bootstrap or Foundation.\nActually, that is how I started to write all of this, but then, the same friend of mine that pointed me in the direction of GitHub Pages, also reminded me that they suggest a workflow with Jekyll.\nTrying to get information about that, I learned that Jekyll is what is called a static site generator and that there are quite a few alternatives out there.\nLooking at a few of the alternatives, I decided to go with Hugo (no pun intended), originally written by Steve Francia.\nI can't claim to have researched the subject extensively, but Hugo seemed like it was configurable enough for my needs/tastes, fast enough and easy enough.\nBasically, the idea of a static site generator is to \"build\" a website telling a build system (I like to think of it as a compiler) how to construct each individual page using templates.\nThen, all you do is generate new (mostly) unformatted content and ask the generator to rebuild the site.\nThis will update everything and include the new content.\nAs it constructs these pages, the build system will make a list of the entries and collect bits and pieces of informations which it will make available to you via a templating language (Hugo being written in Go, it uses Go's templating language).\nYou will be able to access that information more or less easily depending on the templating language and insert it in your templates.\nFor instance, to create a page listing all the posts of the site, you could, in the template, loop through the list of posts and add each of them in a &lt;ul&gt; element.\nAs another example, you can get the title of the post in the template so that when designing the page, you can style that title as you please.\nFor instance:\n&lt;h2 style=\"bad idea, use CSS !\"&gt; $.Page.Title &lt;/h2&gt;\n\nI am not suggesting it is a good practice to style that way (as mentioned in the example), but it illustrates my point about the variables.\nIn the templates, you can also include JavaScript or any other kind of valid HTML you want.\nYou can therefore use a front-end CSS framework like Zurb Foundation or Twitter Bootstrap.\nAlright, this is how I got to Hugo.\nI will stop here and start a new post on my setup.\nThe next post will mark my first post that will actually be what I want for this little site: notes for me on how I did things.\nIt really is necessary.\nSince writing the previous post, I have not done anything involving Hugo and already, I can't really remember the organization of all of this.\nHopefully, taking notes will help.\n","id":"https://ghlecl.github.io/posts/static_site/","title":"Static Site"},"https://ghlecl.github.io/posts/string_ctor/":{"body":"std::string from C style string ctor\nIn writing a function template having to create a std::string from a char[], I have had to use the following constructor of std::string:\nbasic_string( CharT const* s, size_type count, Allocator const&amp; alloc = Allocator() );\n\nwhich you can find documentation for in the standard or on cppreference.com.\nIn using this constructor, I have had a \"off by one\" problem with the count parameter.\nThe function template I originally wrote used the constructor like this:\ntemplate&lt; std::size_t N &gt;\nstd::string foo( char const ( &amp;char_arr )[N] ) {\n   return std::string( char_arr, N );  // WRONG, do not do this\n}\n\nwhich is a mistake.\nThe terminating '\\0' character will be included in the value of N and will thus be part of the std::string (which can contain nulls).\nThus, the size of the new std::string will be one more then expected:\nchar const arr[] = \"string\";\nauto bar = foo( arr );\nassert( bar.length() != 6 );\nassert( bar.length() == 7 );\n\nUsually, when one is certain that the C style string is null terminated, the recommended way to use the constructor is:\nstd::string the_strg( char_arr, std::strlen( char_arr ) );\n\nSince std::strlen will not include the null terminator in the length returned.\nTo mimic this behavior, my template had to be written as:\ntemplate&lt; std::size_t N &gt;\nstd::string foo( char const ( &amp;char_arr )[N] ) {\n   return std::string( char_arr, N - 1 );\n}\n\nwhich will eliminate the need to calculate the length at runtime and yield the correct std::string with the expected length.\nThis is not exactly a hard problem, but it bit me and I want to remember this little detail!\n\nEdit (2018-09-19):\nPatrice Roy pointed out that my return statement in the first function was awkward (copy pasting and modifying to make an example is not ideal) and the second version was not returning anything.\nFixed now.\nThanks Patrice for pointing it out.\n","id":"https://ghlecl.github.io/posts/string_ctor/","title":"One of std::string ctor"},"https://ghlecl.github.io/posts/usual_conversions/":{"body":"Arithmetic on mixed fundamental types in C++\nFor a weekend project of mine, I have had to think about mixed type arithmetic on fundamental types in C++.\nIn the process, I made sense of a few fundamental things (no pun intended ;-)&nbsp;) and I have decided to write them down.\nHopefully, writing about it will allow me to both clarify my thoughts and remember the information!\nArithmetic conversions\nApplying binary operators to different types might seem trivial in C++, because it mostly just works.\nIf you write the following code:\nfloat flt{15.f};\nlong lng_a{30L};\nlong lng_b = lng_a + flt;\nassert( lng_b == 45 );\n\nand then run it, the value of lng_b will be 45.\nNo surprises...\nExcept when you stop to think about what happened in the background and how many rules were involved in the computation.1\nNaively (as seems to often be the case for me...), because of the performance reputation of C++, I assumed that the addition expression above mapped to an assembly language instruction2 to add two registers.\nThen, I started thinking more seriously about the problem, and even though I am anything but an expert in assembly, it brought me to this question: is there an opcode to add an int to a float?  Are there mixed type instructions for the CPUs?\nWith modern hardware, it is not as simple as we think anymore, but as far as I could find out, in most hardware, there is not.\nThis means that at the hardware level, both datum have to have the same representation to allow the operation, which is not completely unreasonable.\nThus, even for the simple expression in the code above, conversions are needed to select a common type to apply the operation on.\nThe C++ language standard explicitly states which conversions will take place (inherited from&nbsp;C) allowing one to take control and override the behavior manually using a cast if preferred.\nThis could be needed if, for instance, the default conversion introduces loss of precision on a given platform or if a specific wrapping behavior is required.\nOne should note that the type selected for the operation by the conversion rules will be the type of both operands and of the return value.\nThis means that a supplementary conversion might happen if the type in which the result of the operation is put is not that which would have been selected by the usual conversions (as is the case in the example above).\nSomething to keep in mind.\nUsual arithmetic conversions\nThe conversion rules applied before binary operations on fundamental types are called the usual arithmetic conversions and can be found in section&nbsp;8&nbsp;Expressions of the C++ standard document3.\nFor those like me who do not easily read \"standardese\", information on the subject with some explanations can be found in other places.\nThat said, I have had to read some of the standard's sections relating to the topic and I have found them not too hard to read.\nMight be a sign that I am slowly getting assimilated...\nIn the discussion that follows, I will consider an operation op on two operands t1 and t2 respectively of types T1 and T2.\nThis can be conceptually represented as:\nT1 t1;\nT2 t2;\nt1 op t2;\n\nIn the discussion, I will consider the following cases:\n\nT1 and T2 are the same type (yes, conversions can happen...)\nT1 is floating point and T2 is integral (or vice versa)\nT1 and T2 are both floating point, but different types\nT1 and T2 are both integral, but different types\n\nThese are almost all the situations covered in paragraph&nbsp;11 of section&nbsp;8 of the standard (but the last point is actually split in several sub-sections).\nThe only case I am not considering is when one of the type (or both) is a scoped enumeration (i.e. an enum class), because that had nothing to do with my project and I simply did not think about it as much.\nSame type\nEven if the types are not actually mixed, I had to consider the case where both operands are of the same type, i.e., T1 == T2.\nIntuitively, nothing should happen in this case, but it turns out that it is a false assumption.\nBecause arithmetic operators in C++ do not accept any type smaller than int, integral promotion will take place before the operation.\nThis is described in section&nbsp;7.6&nbsp;Integral promotions of the standard and can be roughly summarized as: any type smaller than int will be converted to int or unsigned int.\nFor instance, the following relation holds:\nshort a{0};\nshort b{1};\nstatic_assert( is_same_v&lt; int, decltype( a + b ) &gt; );\n\nOther than that, nothing else happens in terms of conversions.\nAs the name suggests, this applies only for integral types.\nI would assume that is because the smallest floating point type is at least as large as an int, but I don't think that is guaranteed.\nMixed integral and floating point types\nNow, to look at mixed type arithmetic, the simplest case to start with is that of integral and floating point mixed operations, i.e. either T1 or T2 is a floating point and the other is integral.\nIn this case, the standard simply mandates that the integer value be converted to the floating point type:\nint + float =&gt; (float)int + float\nunsigned long long - float =&gt; (float)unsigned long long - float\nlong double + unsigned =&gt; long double + (long double)unsigned\n...\n\nThe casts illustrated here are at least what conceptually happens if not what actually happens, but, as far as I can tell, it is what actually happens.\nThe type selected in this situation is not too surprising when you think about it.\nAt least for IEEE floating points, the range of the smallest floating point type (float: 3.4Ã—1038) is much larger than that of the largest integer type (unsigned long long: 1.84Ã—1019).\nThus, neglecting the issue of not being able to represent the value exactly if the mantissa of the floating point type cannot hold the value of the integer type, the floating point type will accommodate the integer type.\nOn top of that, the fractional part of the floating point would necessarily be lost (either by rounding, truncating or any other choice) if the conversion would be in the other direction.\nSo again, because of those two points, the standard here makes sense (at least to me!).\nMixed floating points\nNext on the scale of simplicity is the case where both arguments are of a (different) floating point type.\nIn this case, the rule is simple: the smaller type is cast to the larger type before the operation.\ndouble / float =&gt; double / (double)float\nlong double + double =&gt; long double + (long double)double\n...\n\nThis makes sense.\nThe value in the smaller sized variable will fit in the larger one, so no change in value.\nMixed integrals\nThe final case is that of both operands being of integral types. Here, there are a few more things to consider, since for the same type size, there are signed and unsigned types (for instance, int and unsigned int must be the same size, e.g. 4&nbsp;bytes).\nThis complicates matters a little and before we continue, we need to first define the concept of integer conversion rank (section&nbsp;7.15&nbsp;Integer conversion rank of the standard document) which will be used in deciding the conversions to apply for mixed integer types arithmetic.\nOnce these ranks are defined, the first situation that applies in the following four scenarios is the conversion mandated by the standard:\n\nboth have the same signedness, independent of ranks;\nrank( unsigned ) &gt;= rank( signed );\nrank( signed ) &gt; rank( unsigned ), unsigned in signed range;\nrank( signed ) &gt; rank( unsigned ), unsigned not in signed range;\n\nNote that the order of the rank that I have written in situations 3 and 4 are not mentioned in the standard, but the fact that situations 1 and 2 do not apply implies that the rank of the signed integer is strictly greater than that of the unsigned integer, so I wrote it explicitly.\nInteger conversion rank\nFrom what I understand from reading the standard, the integer types in C++ are not given explicit values, but the relative ordering of the ranks is specified.\nThis can be loosely interpreted as: the integer ranks are in corresponding order of size where the larger integral types have a higher rank.\nIn particular, the standard says (section&nbsp;7.15, par.&nbsp;1.3):\n\nThe rank of long long int shall be greater than the rank of long int, which shall be greater than the rank of int, which shall be greater than the rank of short int, which shall be greater than the rank of signed char.\n\nIn order to remove any ambiguity, the standard adds quite a few details (there are&nbsp;10&nbsp;clauses to the section), but I believe that the following order of ranks, from smallest rank to highest rank, is mandated by the standard:\n\nbool\nchar, signed char, unsigned char\nshort, unsigned short\nint, unsigned int\nlong, unsigned long\nlong long, unsigned long long\n\nwhere for a given type size, signed and unsigned types share their rank.\nI said the rule of thumb as presented above loosely interprets the standard because the standard does not explicitly mandate the size of short, int, long, and others.\nThis freedom is to allow the implementers to represent the various hardware architectures that exist.\nI think this is mostly an artifact of history, since a lot of modern hardware is 32&nbsp;or 64&nbsp;bits, but it is still how the standard is written.\nThat said, it remains that on some machines, two types could share the same size, e.g. on a particular architecture, sizeof(long) could be the same as sizeof(int).\nIn such a case, the standard would still stipulate that those types' ranks are different.\nSpecifically, in the example give, long would still have a higher rank than int.\nSame signedness\nSo, getting back to the mixed operations and the usual conversion, in the case of two integral types with the same signedness, i.e. both T1 and T2 are signed or both of them are unsigned, the standard mandates that the integer with the smaller rank be converted (after promotion), to the integer with the higher rank.\nlong + int =&gt; long + (long) int\nunsigned short * unsigned int =&gt; (unsigned int)unsigned short * unsigned int\n...\n\nThe higher ranked integer will accommodate the values of the smaller ranked one without problem, and there are no considerations of sign, so no possible loss of value or overflow in the conversion (there is possible overflow in the operation, but not in the conversion).\nThis case is an easy one.\nDiffering signedness, unsigned with larger or equal rank\nIn this case, the standard says that the signed integer will be converted to the unsigned type.\nint + unsigned int =&gt; (unsigned int)int + unsigned int\nshort - unsigned int =&gt; (unsigned int)short - unsigned int\n...\n\nThe fact that the operation then yields the correct answer is mandated by the standard.\nIn section&nbsp;7.8&nbsp;Integral conversions, the standard says:\n\nIf the destination type is unsigned, the resulting value is the least unsigned integer congruent to the source integer (modulo&nbsp;2n where n is the number of bits used to represent the unsigned type).\n[ Note: In a twoâ€™s complement representation, this conversion is conceptual and there is no change in the bit pattern (if there is no truncation). â€” end note]\n\nBecause of the modulo&nbsp;2n arithmetic, this will give the correct unsigned answer... most of the time.\nSee the discussion in the last section for an example where this rule yields a surprising result.\nThis being the case, if you are putting the result of the operation in a variable, at this point, it is worth thinking about that variable's type, because if that type is not the type of the unsigned operand (or larger unsigned integral type), you will incur a conversion.\nThat is, while the operation is guaranteed to be correct by the standard, putting it back into anything but a large enough unsigned integral type might not yield the result you expect.\nIn a smaller unsigned integral type, there is at least another modulo conversion happening.\nIf the type is signed (whether it is large enough or not), then the result is implementation defined as stipulated by the standard, again in section&nbsp;7.8:\n\nIf the destination type is signed, the value is unchanged if it can be represented in the destination type; otherwise, the value is implementation-defined.\n\nThe standard does not specify what happens in this case and instead gives latitude to the compiler vendor saying the result is implementation defined.\nThis means that if you rely on this conversion, the behavior might not be portable (not undefined as in the case of overflow, just not portable and tied to the compiler you use). On two's complement machines, this will actually give you wrapping behavior, but relying on this is actually non portable (even if, from what I understand, most hardware uses two's complement these days).\nOn other architectures, the behavior will be different and so portable code should not rely on the conversions without some kind of checks.\nDiffering signedness, signed with larger rank, unsigned in range\nHere, the standard says that the unsigned integral type is converted to the signed integral type.\nlong long int + unsigned long( value &lt; long_long_int_max )\n                           =&gt; long long int + (long long int)unsigned long\n\nGiven that the unsigned integer is representable in the range of the signed integer, the conversion will work as stipulated in section&nbsp;7.8 of the standard that I quoted in the previous part of this post (at least, that is my understanding).\nSo that should always give the correct answer since the unsigned value is in range of the signed type.\nDiffering signedness, signed with larger rank, unsigned not in range\nHere, the standard says that both operands are converted to the unsigned type of same rank as that of the signed integer in the operation.\nThe unsigned should be in range of the unsigned with the larger rank (i.e. the unsigned with same rank as the signed in the operation, which is higher than that of the unsigned in the operation).\nThe signed one will be modulo 2n converted.\nThus the result should be right given the modulo arithmetic, but with the usual caveats of what you do with the result.\nBack to the first example\nSo coming back to the first example, let's see if I can apply the rules to it.\nfloat flt{15.f};\nlong lng_a{30L};\nlong lng_b = lng_a + flt;\n\nAccording to the conversion rules, I would say that the long value will first be converted to float to allow the addition, and that the resulting float will be truncated1, which is what the standard mandates in section&nbsp;7.10&nbsp;Floating-integral conversions:\n\nA prvalue of a floating-point type can be converted to a prvalue of an integertype.\nThe conversion truncates; that is, the fractional part is discarded.\nThe behavior is undefined if the truncated value cannot be represented in the destination type.\n\nThe numbers above are small enough that it just works as expected!\nThis is probably true for a lot of use cases, which is why I think I can stand by my initial affirmation that \"applying binary operations to different types might seem trivial in C++, because it mostly just works\".\nKeep informed\nAs mentioned in the previous post, there is a (controversial?) proposal that has been brought to the the C++ standards committee by JF Bastien which would make two's complement the only allowed representation for signed integers.\nThis could change some of the details of this article, namely the parts where conversion from unsigned to signed is implementation defined.\nSo in C++20 or C++23, the information here could be out of date (already).\nAlso, because of conversions, the following assert will actually fire as the operation will yield false even if the mathematics would suggest otherwise:\nassert( -1 &lt; 0u )\n\nThat is because this is a case where both integers have the same rank (the -1 literal is int and the 0u literal is unsigned int), but differing signedness.\nHere, according to the rules above, the signed integer is converted to the unsigned integer, which means -1 becomes the largest unsigned integer, which will not be smaller than 0.\nThis kind of surprising behavior is currently being discussed in the context of a proposal by Herb Sutter.\nRichard Smith is proposing to bring consistency between the new three-way comparison operator (a.k.a the spaceship operator &lt;=&gt;) and the usual C comparison operators.\nThis might have no impact on what I discussed here or might change it completely.\nI will admit that I am aware of the proposal, but I have not had time to read it through.\nIn any case, the two proposals above, if they are adopted, will change some of what I discussed here, so keep informed if this matters to you!\n\nNotes\nI would like to thank Patrice Roy for reading my post and giving me some advice on it. His time is greatly appreciated.\n[1]&nbsp;Here is a link to the code of the first example in compiler explorer (put in a main function so it compiles).\nYou can see the cvtsi2ss, addss and cvttss2si instructions which respectively convert the long to a float, adds the resulting float with the flt variable, and converts back the result to a long.&nbsp;â†©ï¸Ž\n\n[2]&nbsp;I believe assembly instructions, assembly code, machine code, and opcodes are roughly the same (according to Wikipedia, some assembly instructions do not map directly to opcodes, but most do).\nIn the context of this post, I don't think it makes much of a difference.\nThus, I use the terms interchangeably, but I might be assuming a bit.\nI am out of my depths in this domain.&nbsp;â†©ï¸Ž\n\n[3]&nbsp;The official published document must be purchased from the ISO organization, but the draft papers are freely available and can be found on the web.\nFor instance, a C++17 draft paper (the latest draft before publication I believe, but I might be wrong) can be found here.&nbsp;â†©ï¸Ž\n","id":"https://ghlecl.github.io/posts/usual_conversions/","title":"Mixed types arithmetic in C++"}},"docInfo":{"https://ghlecl.github.io/":{"body":0,"title":2},"https://ghlecl.github.io/about/":{"body":38,"title":0},"https://ghlecl.github.io/posts/":{"body":0,"title":1},"https://ghlecl.github.io/posts/conveting_to_zola/":{"body":219,"title":2},"https://ghlecl.github.io/posts/count_chars_in_n_first_lines/":{"body":85,"title":3},"https://ghlecl.github.io/posts/cpp_invoke/":{"body":2467,"title":3},"https://ghlecl.github.io/posts/cpp_time_it/":{"body":1080,"title":3},"https://ghlecl.github.io/posts/friends_only_class/":{"body":147,"title":2},"https://ghlecl.github.io/posts/github_pages/":{"body":239,"title":2},"https://ghlecl.github.io/posts/integer_representations/":{"body":920,"title":3},"https://ghlecl.github.io/posts/range_function/":{"body":3269,"title":3},"https://ghlecl.github.io/posts/return_type_overload/":{"body":510,"title":3},"https://ghlecl.github.io/posts/rvalue_references_in_cxx/":{"body":1413,"title":3},"https://ghlecl.github.io/posts/static_site/":{"body":301,"title":2},"https://ghlecl.github.io/posts/string_ctor/":{"body":179,"title":3},"https://ghlecl.github.io/posts/usual_conversions/":{"body":1569,"title":4}},"length":16},"lang":"English"};