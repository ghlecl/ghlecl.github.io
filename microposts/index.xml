<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@ghlecl’s Code Attempts - Microposts</title>
    <link>https://ghlecl.github.io/microposts/</link>
    <description>All entries in Microposts on Code Attempts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    <lastBuildDate>Tue, 28 Nov 2017 13:30:00 +0000</lastBuildDate>
    <atom:link href="/microposts/" rel="self" type="application/rss+xml" />
    
      
      <item>
      	
          <title>Friends only class</title>
        
        <link>https://ghlecl.github.io/microposts/friends_only_class/</link>
        <pubDate>Tue, 28 Nov 2017 13:30:00 +0000</pubDate>
        <author>codeattempts@gmail.com - Ghyslain Leclerc</author>
        <guid>https://ghlecl.github.io/microposts/friends_only_class/</guid>
        <description>

&lt;h1 id=&#34;friends-only-class&#34;&gt;Friends only class&lt;/h1&gt;

&lt;p&gt;Having read &lt;a href=&#34;https://arne-mertz.de/2016/11/stronger-types/&#34; target=&#34;_blank&#34;&gt;a few&lt;/a&gt; &lt;a href=&#34;http://www.fluentcpp.com/2016/12/05/named-constructors/&#34; target=&#34;_blank&#34;&gt;blog posts&lt;/a&gt; and watched a short &lt;a href=&#34;https://youtube.com/watch?v=jLdSjh8oqmE&#34; target=&#34;_blank&#34;&gt;presentation&lt;/a&gt; on the subject of &lt;a href=&#34;http://foonathan.net/blog/2016/10/19/strong-typedefs.html&#34; target=&#34;_blank&#34;&gt;strong typedefs&lt;/a&gt;, I decided to look into their use and implementation.  In at least two implementations I have looked at (namely &lt;a href=&#34;https://github.com/foonathan/type_safe&#34; target=&#34;_blank&#34;&gt;type_safe&lt;/a&gt; and &lt;a href=&#34;https://sourceforge.net/projects/opaque-typedef/&#34; target=&#34;_blank&#34;&gt;opaque&lt;/a&gt;), I have found that mixin classes are used to add functionality to the new type.  For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class my_strong_typedef : public addable, public divisible
{};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those mixin were implemented as empty classes that only have friend functions in them.  I was wondering what was the use of such constructs.  Turns out, it is an application of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Barton%E2%80%93Nackman_trick&#34; target=&#34;_blank&#34;&gt;Barton–Nackman trick&lt;/a&gt; to allow &lt;a href=&#34;https://en.wikipedia.org/wiki/Argument-dependent_name_lookup&#34; target=&#34;_blank&#34;&gt;argument dependent name lookup&lt;/a&gt; (ADL) to find the function.&lt;/p&gt;

&lt;p&gt;When the compiler sees the following expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;lt + rt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it must lookup the &lt;code&gt;operator+&lt;/code&gt; function to use with the types of &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;rt&lt;/code&gt;.  From my understanding, it is equivalent to an unqualified call to the operator, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;operator+( lt, rt )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The various &lt;a href=&#34;http://en.cppreference.com/w/cpp/language/lookup&#34; target=&#34;_blank&#34;&gt;name lookup&lt;/a&gt; rules of C++, which are not so simple, are then used to find which function to call and an important aspect in this case is that during ADL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;namespace-scoped friend functions (and function templates) that are declared in an associated class are visible through ADL even if they are not visible through ordinary lookup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which is a quote from the cppreference website.  Because of that part of the standard, an operator defined as a friend in a class of which your class inherits is found.  With this trick, you can, as other libraries have done, create multiple mixin classes from which your primary class inherits and ADL will find the functions.  The empty classes should mostly (if not completely) be optimized away by the compiler.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
      	
          <title>Count chars in lines</title>
        
        <link>https://ghlecl.github.io/microposts/count_chars_in_n_first_lines/</link>
        <pubDate>Wed, 22 Nov 2017 12:30:00 +0000</pubDate>
        <author>codeattempts@gmail.com - Ghyslain Leclerc</author>
        <guid>https://ghlecl.github.io/microposts/count_chars_in_n_first_lines/</guid>
        <description>

&lt;h1 id=&#34;counting-chars-in-first-n-lines&#34;&gt;Counting chars in first n lines&lt;/h1&gt;

&lt;p&gt;I was coding in one of my projects and wanted to make sure that the position I was finding in a file was correct.  In a first attempt, I tried copy-pasting the content of the file up to the position I was searching for into Microsoft Excel&amp;trade; to find the length of the resulting string.  Turns out a naive copy-paste does not preserve whitespace.&lt;/p&gt;

&lt;p&gt;I then thought of writing a small application to do what I wanted : open a file, read the &lt;code&gt;n&lt;/code&gt; first lines and find the total number of characters (bad reflex, I know).  In trying to figure out the command line interface for this, I realized first that it would be a lot of work for something that I might not use often and second, that there might be an easier way on a *Nix system.&lt;/p&gt;

&lt;p&gt;This lead me to simply using the applications &lt;a href=&#34;http://man7.org/linux/man-pages/man1/head.1.html&#34; target=&#34;_blank&#34;&gt;head&lt;/a&gt; and &lt;a href=&#34;http://man7.org/linux/man-pages/man1/wc.1.html&#34; target=&#34;_blank&#34;&gt;wc&lt;/a&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;head -n &amp;lt;line_count&amp;gt; | wc -m
&lt;/code&gt;&lt;/pre&gt;
</description>
      </item>
      
    
  </channel>
</rss>
